<?xml version="1.0" encoding="UTF-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:flmp="flexmapeditor.view.components.*"
	frameRate="25"
	layout="absolute"
	horizontalScrollPolicy="off"
	verticalScrollPolicy="off"
	creationComplete="onCreationComplete()">
	
	<!-- css -->
	<mx:Style>
        ButtonBar {
            buttonStyleName: myCustomButtonStyleName;
        }

        .myCustomButtonStyleName {
            cornerRadius: 0;
        }
    </mx:Style>
	
	<!-- Copyright 2008 toffer. -->
	
	<mx:Script>
	    <![CDATA[
		
		import mx.events.MenuEvent;
		import mx.managers.PopUpManager;
		import mx.core.IFlexDisplayObject;
		
		import flash.events.KeyboardEvent;
		import flash.events.MouseEvent;
		import flash.net.NetConnection;
		import flash.net.ObjectEncoding;
		import flash.net.*;
		import flash.system.Security;
		import flash.text.Font;
		
		import br.com.stimuli.loading.BulkLoader;
		
		import ddgame.client.proxy.ProxyList;
		import ddgame.client.view.HelperList;
		import ddgame.helper.HelperList;

		import ddgame.client.events.EventList;
		import ddgame.client.events.PublicIsoworldEventList;
		
		import flexmapeditor.view.components.PopupList;
		import flexmapeditor.view.components.LoginBox;
		import flexmapeditor.view.components.EnvEditor;

		
		/**
		 *	root de l'application
		 *
		 *	@langversion ActionScript 3.0
		 *	@playerversion Flash 9.0
		 *
		 *	@author toffer
		 */
		
		//---------------------------------------
		// PRIVATE VARIABLES
		//---------------------------------------
		
		// font ui normal
		[Embed(source="assets/Verdana.ttf", fontName="Verdana", fontWeight="normal", mimeType="application/x-font-truetype")]		
		public static var uiFont:Class;
		
		Font.registerFont(uiFont);
		
		// popup en cours
		private var currentPopup:Object;
		// dernier état en cours
		private var lastState:String = "editTriggers";
		// état préload
		private var preloadState:String;
		
		//---------------------------------------
		// PUBLIC VARIABLES
		//---------------------------------------
		
		// connection amfphp
		private var _gateway:NetConnection;
		private var _beta:Object;
		// _facade de la beta
		private var _facade:Object;
		
		// TriggerProxy
		public var triggersProxy:Object;
		// CollisionGridProxy
		public var collisionGridProxy:Object;
		// DatamapProxy
		public var datamapProxy:Object;
		// IsosceneHelper
		public var isosceneHelper:Object;
		// ObjectBuilderProxy
		public var objectBuilderProxy:Object;
		public var playerHelper:Object;
		public var playerProxy:Object;
		public var configProxy:Object;
		// éditeur variables environnement
		public var envEditor:EnvEditor;

		[Bindable]
		public var saveBtnLabel:String;

		
		//---------------------------------------
		// GETTER / SETTERS
		//---------------------------------------
		
		public function get beta () : Object
		{ return _beta; }
		
		public function get facade () : Object
		{ return _facade; }
		
		public function get gateway () : NetConnection
		{ return _gateway; }
		
		/**
		 * Retourne l'état "en preview" de l'appli
		 */
		public function get previewMode():Boolean {
			return currentState == "preview";
		}
		
		//---------------------------------------
		// PUBLIC METHODS
		//---------------------------------------
		
		public function getHelper (name:String) : Object
		{ return _facade.getObserver(name); }
		
		/**
		 *	Recharge la scène en cours
		 */
		public function reload () : void
		{
			if (!previewMode)
			{
				lastState = currentState;
				currentState = null;
			}

			// on recharge
			var mid:int = int(datamapProxy.getData().id);
			beta.sendBaseEvent(EventList.GOTO_MAP, {mapId:mid});
		}
		
		/**
		 * 	Bascule en mode preview / dernier mode 
		 */
		public function switchPreview () : void
		{
			if (!previewMode)
			{
				lastState = currentState;
				currentState = 'preview';
				triggersProxy.triggersEnabled = true;
				viewport.isosceneListenersEnabled = true;
				bt_preview.selected = true;
			}
			else
			{
				currentState = lastState;
				triggersProxy.triggersEnabled = false;
				viewport.isosceneListenersEnabled = false;
				bt_preview.selected = false;
			}				
		}
		
		//---------------------------------------
		// EVENT HANDLERS
		//---------------------------------------
		
		private function onSceneBuilded (event:Event) : void
		{
			// on enleve les listeners de la scene iso
			isosceneHelper.removeListeners();
			if (lastState && previewMode == false)
				currentState = lastState;
			
			if (!previewMode) {
				event.preventDefault();
				triggersProxy.triggersEnabled = false;
			}
		}
		
		/**
		 * 	Réception events claviers
		 *	@param event KeyboardEvent
		 */
		private function keyboardHandler(event:KeyboardEvent):void
		{
//			trace(event.keyCode);
			var kc:uint = event.keyCode;
			if (event.altKey)
			{
				switch (kc)
				{
					case 83 : // shift + s switch mode preview
					{
						saveCurrentEdition();
						break;
					}
					case 84 : // shift + t édition tiles
					{
//						switchToOption("editTiles");
						break;
					}
					case 254 : // alt + p reload & switch mode preview (si pas)
					{
//						if (event.shiftKey)
//							previewReloadButtonHandler();
//						else
						switchPreview();
						break;
					}
				}
				return;
			}
		}
		
		/**
		 *	Reception des events dans la barre de menu 
		 * 
		 *	@param event MenuEvent
		 */
		private function menuBarHandler(event:MenuEvent):void
		{
			var entry:String = event.item.@data;
			switch (entry)
			{
				// > ouvrir une scène
				case "open" :
				{
					// ouverture fenetre
					var dBox:IFlexDisplayObject = PopUpManager.createPopUp(this, PopupList, true);
					PopUpManager.centerPopUp(dBox);
					currentPopup = dBox;
					// on lance la recup de la liste des maps
					_gateway.call( "sos21Services.getMapList", new Responder(onMaplistResult, onFault));
					break;
				}
				// > édition des tiles
				case "editTiles" :
				{
					currentState = 'editTiles';
					break;
				}
				// > édition collisions
				case "editCollisions" :
				{
					currentState = 'editCollisions';
					break;
				}
				//  > édition triggers
				case "editTrigger" :
				{
					currentState = 'editTriggers';
					break;
				}
				// > édition propriété de la scène
				case "editMapConfig" :
				{
					currentState = "editMapConfig";
					break;
				}
				case "editEnv" :
				{
					PopUpManager.addPopUp(envEditor, this, true);
					PopUpManager.centerPopUp(envEditor);
					break;
				}
				case "dispBackground" :
				{
					viewport.backgroundVisible = Boolean(event.item.@toggled == "true" ? true : false);
					break;
				}
				case "dispForeground" :
				{
					viewport.foregroundVisible = Boolean(event.item.@toggled == "true" ? true : false);
					break;
				}
				case "dispTiles" :
				{
					viewport.tilesVisible = Boolean(event.item.@toggled == "true" ? true : false);
					break;
				}
				case "dispHiddenTiles" :
				{
					viewport.showHiddenTiles = Boolean(event.item.@toggled == "true" ? true : false);
					break;
				}
				case "dispWall" :
				{
					viewport.wallsVisible = Boolean(event.item.@toggled == "true" ? true : false);
					break;
				}
			}
		}
		
		/**
		 *	Réception events popup en cours
		 *	ouverture de scène, ... 
		 * 
		 *	@param event Event
		 */
		private function popupListHandler(event:Event):void
		{
			switch (currentPopup.title)
			{
				case "ouvrir une scène" :
				{
					//
					var mid:int = int(currentPopup.itemList.selectedItem.id);
					beta.sendBaseEvent(EventList.GOTO_MAP, {mapId:mid});
					//
					currentPopup.validateButton.removeEventListener(MouseEvent.CLICK, popupListHandler, false);
					PopUpManager.removePopUp(IFlexDisplayObject(currentPopup));
					//
					if (!bt_preview.selected)
					{
						lastState = currentState;
						currentState = "noEdit";
					}
					break;
				}
			}
		}
		
		/**
		 *	Réception event remoting pour la liste des maps
		 *	@param result Array
		 */
		private function onMaplistResult(result:Array):void
		{
			currentPopup.dpItemList = result;
			currentPopup.title = "ouvrir une scène";
			currentPopup.validateButton.label = "ouvrir";
			currentPopup.validateButton.addEventListener(MouseEvent.CLICK, popupListHandler, false, 0, true);
		}

		private function onFault(fault:String):void  {
			trace(fault);
		}
		
		/**
		 *	Reception validation boite login 
		 *	@param event Event
		 */
		private function loginBoxHandler(event:Event):void
		{
			if (currentPopup)
			{
				var users:Array = ["demo"];
				var usersPass:Array = ["demo"];
				var admin:Array = ["axelle"];
				var adminPass:Array = ["beebop"];
				
				var iname:String = currentPopup.username.text;
				var ipass:String = currentPopup.password.text;
								
				var logged:Boolean = false;
				
				var ind:int = users.indexOf(iname);
				if (ind == usersPass.indexOf(ipass) && ind > -1)
				{
					_gateway.addHeader( "Credentials", false, {userid: "lapin", password: "bleu"} );
					logged = true;
				} else {
					ind = admin.indexOf(iname);
					if (ind == adminPass.indexOf(ipass) && ind > -1)
					{
						_gateway.addHeader( "Credentials", false, {userid: "lievre", password: "vert"} );
						logged = true;
					}
				}
				
				if (logged)
				{					
					PopUpManager.removePopUp(IFlexDisplayObject(currentPopup));
					currentPopup = null;
				}				
			}
		}
		
		/**
		 *  Réception core initialisé, l'appli est prète
		 *	@param event Event
		 */
		private function onCoreInitialized (event:Event) : void
		{
			// récup _facade
			_facade = _beta.facade;			
			_facade.publicChannel.removeEventListener("appReady", onCoreInitialized, false);			
			
			configProxy = _facade.getProxy("configProxy");
			// connection remoting
			var rhost:String = configProxy.getContent("services_path");
			_gateway = new NetConnection();
			_gateway.objectEncoding = ObjectEncoding.AMF0;
			_gateway.connect(rhost);
			_gateway.addHeader( "Credentials", false, {userid: "lievre", password: "vert"} );
			
			// stockage des refs
			triggersProxy = _facade.getProxy(ProxyList.TRIGGERS_PROXY)
			collisionGridProxy = _facade.getProxy(ProxyList.COLLISIONGRID_PROXY);
			datamapProxy = _facade.getProxy(ProxyList.DATAMAP_PROXY);
			playerProxy = _facade.getProxy(ProxyList.PLAYER_PROXY);
			triggersProxy = _facade.getProxy(ProxyList.TRIGGERS_PROXY);
			isosceneHelper = _facade.getObserver(ddgame.client.view.HelperList.ISOSCENE_HELPER);
			objectBuilderProxy = _facade.getProxy(ProxyList.OBJECTBUILDER_PROXY);
			envEditor = new EnvEditor;
			envEditor.datamapProxy = datamapProxy;
			envEditor.gateway = _gateway;
			envEditor.playerProxy = playerProxy;
			playerHelper = _facade.getObserver(ddgame.client.view.HelperList.PLAYER_HELPER);
			
			playerProfil.playerProxy = playerProxy;
			playerProfil.gateway = _gateway;			
			
			// on coupe les triggers
			triggersProxy.triggersEnabled = false;
			// on coupe le son
			_facade.getObserver(ddgame.helper.HelperList.AUDIO_HELPER).muteMusic();
			
			// on s'abonne à la construction des scènes
			isosceneHelper.channel.addEventListener(PublicIsoworldEventList.ISOSCENE_BUILDED, onSceneBuilded, false, 500, true);
			// ecoute clavier
			stage.addEventListener(KeyboardEvent.KEY_UP, keyboardHandler, false, 0, true);
			
			// passage appli pour affichage
			viewport.display = _beta;
		}
		
		/**
		 *  Réception préloading config et core
		 *	@param event Event
		 */
		private function onPreloadComplete (event:Event) : void
		{
			var loader:BulkLoader = BulkLoader.getLoader("preload");
			switch (preloadState)
			{
				// > config chargée
				case "conf" :
					preloadState = "app"
					loader.add("core.swf", {id:"core"});
					loader.start();
					break;
				// > core chargé
				case "app" :
					_beta = loader.getContent("core", true);
					_beta.startup(loader.getXML("config", true));
					_beta.facade.publicChannel.addEventListener("appReady", onCoreInitialized, false, 0);
					loader.removeEventListener(Event.COMPLETE, onPreloadComplete);
					preloadState = null;
					break;
			}
		}
		
		/**
		 *	Réception application initialisée
		 *  Mise en place du remoting et début préload
		 */
		private function onCreationComplete () : void
		{
			Security.allowDomain("*");
			
			// ecoute selection dans menu
			menuBar.addEventListener(MenuEvent.ITEM_CLICK, menuBarHandler, false, 100, true);
			focusManager.deactivate();
			
			// preload
			var loader:BulkLoader = new BulkLoader("preload");
			// chargement config
			preloadState = "conf";
			loader.add("config.xml", {id:"config"});
			loader.addEventListener(Event.COMPLETE, onPreloadComplete);
			loader.start();
		}
		
		//---------------------------------------
		// PRIVATE & PROTECTED METHODS
		//---------------------------------------
		
		/**
		 *	@private
		 * 	Recharge la preview (si en mode preview)
		 */
		private function reloadPreview () : void
		{
			if (previewMode)
			{
				var mid:int = int(datamapProxy.getData().id);
				beta.sendBaseEvent(EventList.GOTO_MAP, {mapId:mid});
			}
		}
		
		private function saveCurrentEdition(event:Event = null):void
		{
			switch (currentState)
			{
				case "editTriggers" :
				{
					triggerEditor.save();
					break;
				}
				case "editCollisions" :
				{
					collisionsEditor.save();
					break;
				}
				case "editTiles" :
				{
					tilesEditor.save();
					break;
				}
				case "editMapConfig" :
				{
					mapConfigEditor.save();
					break;
				}
					
			}
		}
		
	    ]]>
	</mx:Script>
	
	<mx:states>
		<mx:State name="preview">
			<mx:SetProperty target="{saveCurrentEditBtn}" name="visible" value="false" />
			<mx:SetProperty target="{menuBar}" name="enabled" value="false" />
			<mx:AddChild relativeTo="{propertyBox}">
				<mx:HBox />
			</mx:AddChild>
		</mx:State>
		<mx:State name="noEdit">
			<mx:SetProperty target="{saveCurrentEditBtn}" name="visible" value="false" />
			<mx:AddChild relativeTo="{propertyBox}">
				<mx:HBox />
			</mx:AddChild>
		</mx:State>
		<mx:State name="editTiles">
			<mx:SetProperty target="{saveCurrentEditBtn}" name="visible" value="true" />
			<mx:SetProperty target="{saveCurrentEditBtn}" name="label" value="sauvegarder la scene (ctrl + s)" />
			<mx:AddChild relativeTo="{toolBox}">
				<flmp:TilesEditorTollBar id="tileEditorToolBar" />
			</mx:AddChild>			
			<mx:AddChild relativeTo="{propertyBox}">
				<flmp:TilesEditor id="tilesEditor" />
			</mx:AddChild>
		</mx:State>		
		<mx:State name="editTriggers">
			<mx:SetProperty target="{saveCurrentEditBtn}" name="visible" value="true" />
			<mx:SetProperty target="{saveCurrentEditBtn}" name="label" value="sauvegarder les actions (ctrl + s)" />
			<mx:AddChild relativeTo="{toolBox}">
				<flmp:TriggersEditorTollBar id="triggerEditorToolBar" />
			</mx:AddChild>			
			<mx:AddChild relativeTo="{propertyBox}">
				<flmp:TriggersEditor id="triggerEditor" />
			</mx:AddChild>
		</mx:State>
		<mx:State name="editCollisions">
			<mx:SetProperty target="{saveCurrentEditBtn}" name="visible" value="true" />
			<mx:SetProperty target="{saveCurrentEditBtn}" name="label" value="sauvegarder les collisions"/>
			<mx:AddChild relativeTo="{propertyBox}">
				<flmp:CollisionsEditor id="collisionsEditor" />
			</mx:AddChild>
		</mx:State>
		<mx:State name="editMapConfig">
			<mx:SetProperty target="{saveCurrentEditBtn}" name="visible" value="true" />
			<mx:SetProperty target="{saveCurrentEditBtn}" name="label" value="sauvegarder"/>
			<mx:AddChild relativeTo="{propertyBox}">
				<flmp:MapConfigEditor id="mapConfigEditor" />
			</mx:AddChild>
		</mx:State>
	</mx:states>
	
	<mx:Box id="appCanvas" width="100%" height="100%" backgroundColor="#E8E8E8" focusEnabled="false">
		<mx:HBox width="100%" focusEnabled="false">
			<flmp:ApplicationMenu id="menuBar" width="100%" />
			<flmp:PlayerProfil id="playerProfil" paddingRight="295" />
			
			<flmp:SButton id="bt_preview"
				icon="@Embed('flexmapeditor/view/components/icons/rainbow.png')"
				toolTip="tester la scène" toggle="true" click="switchPreview()" 
				focusEnabled="false"
				mouseFocusEnabled="false" />
			<flmp:SButton id="bt_previewReload"
				icon="@Embed('flexmapeditor/view/components/icons/arrow_refresh.png')"
				toolTip="recharger / tester la scene"
				click="reload()" />
		</mx:HBox>
		<mx:HBox id="mainContent" width="100%" height="100%">
			<mx:Box id="toolBox" width="32" height="100%" />
			<mx:VBox height="100%" width="100%">
				<mx:HBox width="100%">
			
			
					<!-- <mx:VBox> -->
						<!-- <mx:Canvas id="canvas" height="512"> -->
					<flmp:Viewport id="viewport" />
						<!-- </mx:Canvas> -->
					<!-- </mx:VBox> -->
			
					<mx:VBox width="100%" height="100%">
						<mx:HBox id="propertyBox" width="100%" height="100%" backgroundColor="#E8E8E8" />
						<flmp:SButton id="saveCurrentEditBtn" width="100%"
									icon="@Embed('flexmapeditor/view/components/icons/disk.png')"
									visible="false"
									label=""
									focusEnabled="false"
									toolTip="{saveBtnLabel}"
									click="saveCurrentEdition(event);"/>
					</mx:VBox>
				</mx:HBox>
				<mx:Box id="optionBox" width="100%" height="100%" />
			</mx:VBox>
		</mx:HBox>
	</mx:Box>
	
	<!-- <view:UILayout id="ui" />
	<view:TriggersEditor /> -->
	
</mx:Application>
