<?xml version="1.0" encoding="UTF-8"?>
<!-- conteneur pour la librarie des tiles -->
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:flmp="flexmapeditor.view.components.*"
	title="... tiles !"
	width="340" height="100%"
	paddingTop="10"
	backgroundColor="#E8E8E8"
	borderAlpha="1"
	highlightAlphas="[0.0,0]"
   	borderThicknessLeft="6"
   	borderThicknessRight="6"
   	borderThicknessTop="2"
	addedToStage="onAdd();"
	removedFromStage="onClose();"
	creationComplete="onCreationComplete();">


	<mx:Script>
		<![CDATA[
		
		import mx.core.ClassFactory;
		import mx.events.ListEvent;
		import mx.controls.Alert;
		import mx.collections.ArrayCollection;
		import mx.containers.Box;
		import mx.core.IFlexDisplayObject;
		import mx.managers.PopUpManager;
		import flash.geom.Point;
		import flash.events.*;
		import flash.display.*;
		import flash.filters.GlowFilter;
		import flash.net.*;
		
		//---------------------------------------
		// ACCESSORS
		//---------------------------------------
		
		[Bindable]
		private var tilePosStep:Number = 1;
		
		//---------------------------------------
		// PRIVATE & PROTECTED INSTANCE VARIABLES
		//---------------------------------------
		
		private var currentTile:Object;
		private var ctDragOfsX:int;
		private var ctDragOfsY:int;
		private var currentTileShadow:Object;
		private var selectFx:GlowFilter = new GlowFilter(0xFF9900);
		private var deleteFx:GlowFilter = new GlowFilter();
		private var isoscene:Object;
		private var datamapProxy:Object;
		private var objectBuilderProxy:Object;
		
		[Bindable]
		private var inEditTileInScene:Boolean;
		
		private var inAddTileToScene:Boolean;
		
		//---------------------------------------
		// PUBLIC METHODS
		//---------------------------------------
		
		/**
		 * Retourne la liste des objets de la librairie
		 */
		public function get tlTilesList () : Object
		{ return tileLibrary.tileList; }
		
		/**
		 * Retourne le prochain identifiant d'objet de la
		 * scène disponible
		 */
		public function get nextAvailableTileID () : String
		{
			var tlist:Array = parentApplication.viewport.tileList;
			var na:int = 0;
			var tid:String;
			var n:int = tlist.length;
			while (--n > -1)
			{
				tid = tlist[n].ID;
				if (tid.indexOf("_w_") > -1)
					tid = tid.split("_")[2];

				if (int(tid) > na) {
					na = int(tid);
				}
			}

			return String(na + 1);
		}
		
		/**
		 * 
		 * Retourne les données descripteur d'un objet
		 * de la scène
		 *	@param id String
		 *	@return Object
		 */
		public function getTileData (id:String) : Object
		{
			for each (var dt:Object in parentApplication.datamapProxy.tileList)
				if (dt.id == id) return dt;

			return null;
		}
		
		/**
		 * 	Sauvegarde
		 *	@private
		 */
		public function save () : void
		{
			var tileList:Array = datamapProxy.tileList;
			var n:int = tileList.length;
			var t:Object;
			var st:Object;
			var upTileList:Array = [];
			while (--n > -1)
			{
				t = tileList[n];
				st = {id:t.id, refId:t.refId, pos:{x:t.pos.x, y:t.pos.y, z:t.pos.z, r:t.pos.r}};
				if ("pnj" in t) st.pnj = t.pnj;
				if ("hi" in t) st.hi = t.hi;
				upTileList.push(st);
			}
			
			enabled = false;
			datamapProxy.getData().save(["objects"], onSaveSuccess, onSaveFault);
		}
		
		//---------------------------------------
		// EVENT HANDLERS
		//---------------------------------------
		
		private function mouseEditTileInSceneHandler(event:MouseEvent):void
		{
			if (event.isDefaultPrevented()) return;
			
			var tile:Object = event.target;

			switch (event.type)
			{
				case MouseEvent.MOUSE_OVER :
				{
					if ("ID" in tile) {
						tile.filters = [parentApplication.tileEditorToolBar.btnDeleteTile.selected ? deleteFx : selectFx];
					}
					break;
				}
				case MouseEvent.MOUSE_OUT :
				{
					if (currentTile)
					{
						if ("ID" in tile) 
						{
							if (tile != currentTile)
							tile.filters = [];
						}
					} else {
						tile.filters = [];
					}
					break;
				}
				case MouseEvent.MOUSE_MOVE :
				{
					var mox:int = stage.mouseX - ctDragOfsX;
					var moy:int = stage.mouseY - ctDragOfsY;
					var p:Point;
					if (cbFloatTilePos.selected)
					{
						p = isoscene.sceneLayer.findFloatGridPoint(new Point (mox, moy));
					} else {
						p = isoscene.sceneLayer.findGridPoint(new Point (mox, moy));
					}

					var up:Object = objectBuilderProxy.createUPoint(p.x, p.y, 0);
					up.xu = nsTileXpos.value = p.x;
					up.yu = nsTileYpos.value = p.y;					

					currentTileShadow.umove(up);
					up.zu = nsTileZpos.value;
					currentTile.umove(up);
					break;
				}
				case MouseEvent.MOUSE_DOWN :
				{
					// click sur un tile
					if ("ID" in tile)
					{						
						// bouton supprimer tile est enfoncé
						if (parentApplication.tileEditorToolBar.btnDeleteTile.selected)
						{
							removeTileFromScene(tile);
						} else {
							// on test si l'objet cliqué est le courant
							if (currentTile)
							{
								if (currentTile.ID != tile.ID)
								{
									isoscene.groundLayer.removeTile(currentTileShadow);
									currentTileShadow = null;
									currentTile.filters = [];
								} else {
									// mémoristation offsets de clique
									ctDragOfsX = isoscene.sceneLayer.mouseX - currentTile.x;
									ctDragOfsY = isoscene.sceneLayer.mouseY - currentTile.y - (currentTile.upos.zu * datamapProxy.tileh);
									
									stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseEditTileInSceneHandler, false, 0, true);
									parentApplication.viewport.addEventListener(MouseEvent.MOUSE_UP, mouseEditTileInSceneHandler, false, 0, true);												
									return;
								}
								// effacement info
								tileInfo.text = "";
							}

							// ombre
							var upos:Object = tile.upos;
							var tileData:Object = {width:upos.width, depth:upos.depth};
							var tv:Object = objectBuilderProxy.createTileView(createShadowTile(tileData));					
							currentTileShadow = objectBuilderProxy.createAbstractTile("_shadowtile_", upos.xu, upos.yu, 0, tv);
							currentTileShadow.upos.xFactor = upos.xFactor;
							currentTileShadow.upos.yFactor = upos.yFactor;
							currentTileShadow.upos.zFactor = upos.zFactor;

							isoscene.groundLayer.addTile(currentTileShadow);

							// update NumericSteppers position
							if (upos.xu - int(upos.xu) > 0 || upos.yu - int(upos.yu) > 0 || upos.zu - int(upos.zu) > 0) {
								cbFloatTilePos.selected = true;
								cbFloatTilePosHandler();
							} else {
								cbFloatTilePos.selected = false;
								cbFloatTilePosHandler();								
							}
							
							nsTileXpos.value = upos.xu;
							nsTileYpos.value = upos.yu;
							nsTileZpos.value = upos.zu;
							
							// mémoristation offsets de clique
							ctDragOfsX = isoscene.sceneLayer.mouseX - tile.x;
							ctDragOfsY = isoscene.sceneLayer.mouseY - tile.y - (tile.upos.zu * datamapProxy.tileh);
							
							stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseEditTileInSceneHandler, false, 0, true);
							parentApplication.viewport.addEventListener(MouseEvent.MOUSE_UP, mouseEditTileInSceneHandler, false, 0, true);

							tile.filters = [selectFx];
							currentTile = tile;
							removeRollListeners();
							
							// affichage info
							var dt:Object = getTileData(currentTile.ID);

							tileInfo.text = currentTile.name + " id:" + dt.id + " ( w: " + currentTile.upos.width + ", d: " + currentTile.upos.depth + ", h: " + currentTile.upos.height + " )";
							tileInfo.text += " - asset ( " + dt.refId + " ) url: " + dt.assets[0];							
							// objet caché
							cbHiddenTile.selected = dt.hi;
							
							
							
						}
					} else { // clique dans zone vierge
						if (currentTile)
						{
							isoscene.groundLayer.removeTile(currentTileShadow);
							currentTileShadow = null;
							currentTile.filters = [];
							currentTile = null;
							// effacement info
							tileInfo.text = "";
							cbHiddenTile.selected = false;
						}
					}
					break;
				}
				case MouseEvent.MOUSE_UP :
				{
					updateDataTile(currentTile);
					stage.removeEventListener(MouseEvent.MOUSE_MOVE, mouseEditTileInSceneHandler, false);
					parentApplication.viewport.removeEventListener(MouseEvent.MOUSE_UP, mouseEditTileInSceneHandler, false);
					addRollListeners();
					break;
				}
			}
		}
		
		/**
		 *	Reception events souris, ajout tiles dans la scène
		 *	@param event MouseEvent
		 */
		private function mouseAddTileToSceneHandler(event:MouseEvent):void
		{
			if (event.isDefaultPrevented()) return;
			
			switch (event.type)
			{
				case MouseEvent.MOUSE_MOVE :
				{
					// TODO je triche !
					var bd:Object = currentTileShadow.getBounds(currentTileShadow);
					var pw:int = (bd.right + bd.left) / 2;
					var ph:int = currentTileShadow.height / 2;
					var mox:int = stage.mouseX - pw;
					var moy:int = stage.mouseY - ph;
					var p:Point;
					if (cbFloatTilePos.selected)
					{
						p = isoscene.debugLayer.findFloatGridPoint(new Point (mox, moy));
					} else {
						p = isoscene.debugLayer.findGridPoint(new Point (mox, moy));
					}

					var up:Object = objectBuilderProxy.createUPoint(p.x, p.y, 0);
//					var up:Object = currentTile.upos;
					up.xu = nsTileXpos.value = p.x;
					up.yu = nsTileYpos.value = p.y;					

					currentTileShadow.umove(up);

//					currentTileGrid.umove(up);
					up.zu = nsTileZpos.value;
					currentTile.umove(up);
					break;
				}
				case MouseEvent.MOUSE_UP :
				{
					if (currentTileShadow)
					{
						var upos:Object = currentTile.upos;
						var td:Object = tlTilesList.selectedItem.dataTile;
//						addTileToScene(td.id, td.assets, upos.xu, upos.yu, upos.zu, 0, upos.width, upos.height, upos.depth);
						addTileToScene(td, upos.xu, upos.yu, upos.zu, 0, upos.width, upos.height, upos.depth);
					}
					break;
				}
			}
		}
		
		/**
		 *	@param event Event
		 */
		private function cbFloatTilePosHandler(event:Event = null):void
		{
			if (cbFloatTilePos.selected)
			{
				tilePosStep = 0.1;
			} else {
				tilePosStep = 1;
			}
		}
		
		/**
		 * Réception option tile afficher / caché
		 *	@param event Event
		 */
		private function ckTileHiddenHandler (event:Event) : void
		{
			if (currentTile)
			{
				var dt:Object = getTileData(currentTile.ID);
				dt.hi = cbHiddenTile.selected;
			}
		}
		
		/**
		 * 	Reception events NumericStepper position du tile
		 *	@param event Event
		 */
		private function nsTilePosHandler(event:Event):void
		{
			if (currentTile)
			{				
				if (event.target == nsTileRot)
				{
					currentTile.rotation = nsTileRot.value;
				} else {
					var upos:Object = currentTile.upos.clone();
					upos.xu = nsTileXpos.value;
					upos.yu = nsTileYpos.value;
					if (event.target != nsTileZpos)
					{
						upos.zu = 0;
						currentTileShadow.umove(upos);
					}
					upos.zu = nsTileZpos.value;
					currentTile.umove(upos);

				}
				
				updateDataTile(currentTile);
			}
		}		
		
		/**
		 *	Reception event librairie des tiles 
		 *	@param event Event
		 */
		private function tileLibraryHandler (event:Event) : void
		{
			switch (true)
			{
				// > clique thumb dans la librairie
				case event is ListEvent :
				{
					var dataTile:Object = ListEvent(event).itemRenderer.data.dataTile;
					
					if (inEditTileInScene)
					{
						stopEditTileInSceneEdition();
						startAddTileToSceneEdition();
					} else {
						if (currentTile)
						{
							if (currentTile.name != dataTile.title)
							{
								isoscene.sceneLayer.removeTile(currentTile);
								isoscene.groundLayer.removeTile(currentTileShadow);
								currentTile = null;
								createTileTemplate(dataTile);
								// startAddTileToSceneEdition();
							} else {
								// clique sur item déja selectionnée dans la librairie
								// on retourne en édition des tiles de la scène
								stopAddTileToSceneEdition();
								startEditTileInSceneEdition();
							}
						} else {
							startAddTileToSceneEdition();
						}
					}
					break;
				}
			}	
		}
		
		/**
		 * 	Réception events barre d'outils
		 *	@param event MouseEvent
		 */
		private function tileEditorToolBarHandler (event:MouseEvent) : void
		{
			var btn:Object = event.target;
			switch(btn)
			{
				case parentApplication.tileEditorToolBar.btnDeleteTile :
				{
					if (btn.selected)
					{
						if (inAddTileToScene) {
							stopAddTileToSceneEdition();
							startEditTileInSceneEdition();
						} else {
							stopEditTileInSceneEdition();
						}
						startEditTileInSceneEdition();
					} else {
						
					}
					break;
				}
				case parentApplication.tileEditorToolBar.btnEditTile :
				{
					
					PopUpManager.addPopUp(spriteEditor, this, true);
					spriteEditor.librarys = tileLibrary.librarys;
					spriteEditor.services = parentApplication.serverProxy.getServices("object");
					if (currentTile) spriteEditor.editModel(getTileData(currentTile.ID).refId);
					break;
				}
			}
		}
		
		/**
		 * Réception sauvegarde
		 *	@param result Object
		 */
		private function onSaveSuccess (result:Object) : void
		{ enabled = true; }
		
		/**
		 *	Réception erreur Remoting 
		 *	@param fault String
		 */
		private function onSaveFault (fault:Object) : void
		{
			enabled = true;
			Alert.show("", "Erreur lors de la sauvegarde de objets");
		}
		
		private function onAdd():void
		{
			// 
			var tlist:Array = parentApplication.viewport.tileList;
			var n:int = tlist.length;
			var t:Object;
			while (--n > -1)
			{
				t = tlist[n];
				t.mouseEnabled = true;
			}
			
			parentApplication.tileEditorToolBar.btnDeleteTile.selected = false;
			// écoute bar d'outils
			parentApplication.tileEditorToolBar.addEventListener(MouseEvent.CLICK, tileEditorToolBarHandler, false, 0, true);
			
			if (tileLibrary) tlTilesList.addEventListener("itemClick", tileLibraryHandler);
			
			currentState = "onAdd";
			startEditTileInSceneEdition();
		}
		
		private function onClose():void
		{
			var tlist:Array = parentApplication.viewport.tileList;
			var n:int = tlist.length;
			var t:Object;
			while (--n > -1)
			{
				t = tlist[n];
				t.mouseEnabled = false;
			}
			
			currentState = null;
			if (inAddTileToScene) {
				stopAddTileToSceneEdition();
			} else {
				stopEditTileInSceneEdition();
			}
			
			parentApplication.tileEditorToolBar.removeEventListener(MouseEvent.CLICK, tileEditorToolBarHandler, false);
			tlTilesList.removeEventListener("itemClick", tileLibraryHandler);
		}
		
		private var spriteEditor:SpriteEditor;
		
		/**
		 *	Reception première initialisation 
		 *	@private
		 */
		private function onCreationComplete():void
		{
			// stock reférence utiles
			isoscene = parentApplication.isosceneHelper.component;
			datamapProxy = parentApplication.datamapProxy;
			objectBuilderProxy = parentApplication.objectBuilderProxy;
			
			spriteEditor =  new SpriteEditor();
//			spriteEditor.gateway = parentApplication.gateway;			
			/*spriteEditor.width = 600;
			spriteEditor.height = 400;*/
			
			tlTilesList.addEventListener("itemClick", tileLibraryHandler);
//			parentApplication.gateway.call( "sos21Services.getTileCategoryList", new Responder(onCategoryResult, onFault));
		}
		
		//---------------------------------------
		// PRIVATE & PROTECTED METHODS
		//---------------------------------------
		
		private function createDataTile(sid:String, irefId:int, px:Number, py:Number, pz:Number, rot:int):void
		{
		}
		
		private function addRollListeners():void
		{
			parentApplication.viewport.addEventListener(MouseEvent.MOUSE_OVER, mouseEditTileInSceneHandler, false, 0, true);
			parentApplication.viewport.addEventListener(MouseEvent.MOUSE_OUT, mouseEditTileInSceneHandler, false, 0, true);			
		}
		
		private function removeRollListeners():void
		{
			parentApplication.viewport.removeEventListener(MouseEvent.MOUSE_OVER, mouseEditTileInSceneHandler, false);
			parentApplication.viewport.removeEventListener(MouseEvent.MOUSE_OUT, mouseEditTileInSceneHandler, false);			
		}
		
		private function startEditTileInSceneEdition():void
		{
			parentApplication.viewport.addEventListener(MouseEvent.MOUSE_DOWN, mouseEditTileInSceneHandler, false, 0, true);
			addRollListeners();
			inEditTileInScene = true;
		}
		
		private function stopEditTileInSceneEdition():void
		{
			parentApplication.viewport.removeEventListener(MouseEvent.MOUSE_DOWN, mouseEditTileInSceneHandler, false);
			parentApplication.viewport.removeEventListener(MouseEvent.MOUSE_UP, mouseEditTileInSceneHandler, false);
			stage.removeEventListener(MouseEvent.MOUSE_MOVE, mouseEditTileInSceneHandler, false);
			removeRollListeners();
			
			if (currentTile)
			{
				currentTile.filters = [];
				isoscene.groundLayer.removeTile(currentTileShadow);
				currentTile = null;
			}
			inEditTileInScene = false;
		}
		
		private function startAddTileToSceneEdition():void
		{
			var itlib:Object = tlTilesList.selectedItem;
			if (itlib)
			{
				stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseAddTileToSceneHandler, false, 0, true);
				parentApplication.viewport.addEventListener(MouseEvent.MOUSE_UP, mouseAddTileToSceneHandler, false, 0, true);
				createTileTemplate(itlib.dataTile);
				inAddTileToScene = true;
			}			
		}
		
		private function stopAddTileToSceneEdition():void
		{
			stage.removeEventListener(MouseEvent.MOUSE_MOVE, mouseAddTileToSceneHandler, false);
			parentApplication.viewport.removeEventListener(MouseEvent.MOUSE_UP, mouseAddTileToSceneHandler, false);
	 		
			if (currentTile)
			{
				isoscene.sceneLayer.removeTile(currentTile);
				isoscene.groundLayer.removeTile(currentTileShadow);
				currentTile = null;
				
			}
			tlTilesList.selectedItem = null;
			inAddTileToScene = false;
		}
		
		/**
		 * 	Ajoute un tile dans la scène, mets
		 *  à jour les data correspondante
		 *	@param irefId int
		 *	@param assetsUrl String
		 *	@param xu Number
		 *	@param yu Number
		 *	@param zu Number
		 *	@param rot int
		 */
		private function addTileToScene (tileData:Object, xu:Number, yu:Number, zu:Number, rot:int, w:Number, h:Number, dp:Number):void
		{
			// CHANGED 2010-07-19 test PNJ
			var assetsUrl:String = tileData.assets;
			var tv:Object;
			if ("pnj" in tileData)
			{
//				trace(this, "----- PNJ ------", tileData.pnj);
				if (tileData.pnj == 1)
				{
					var bloader:Object = tileLibrary.loader;
					var cl:Class = bloader.getContent(assetsUrl).loaderInfo.applicationDomain.getDefinition(tileData.title);
					var mc:Object = new cl();
					var datamapProxy:Object = parentApplication.datamapProxy;
					var factor:Number = datamapProxy.avatarFactor;
					mc.scaleX = mc.scaleY = factor;
					mc.y = datamapProxy.tileh / 2;
					tv = objectBuilderProxy.createMCTileView(mc);					
				} 	else
					{
						var loader:Loader = new Loader();
						loader.load(new URLRequest(assetsUrl));
						// patch offset placement
						loader.x = tileData.ofsX;
						loader.y = tileData.ofsY;
						tv = objectBuilderProxy.createTileView(loader);
					}
			} 
			
			/*var loader:Loader = new Loader();
			loader.load(new URLRequest(tileData.assets));
			// patch offset placement
			loader.x = tileData.ofsX;
			loader.y = tileData.ofsY;*/

			// id valable
			var tid:String = nextAvailableTileID;
			// mise en place tile dans la scène
//			var tv:Object = objectBuilderProxy.createTileView(loader);
			var t:Object = objectBuilderProxy.createAbstractTile(tid, xu, yu, zu, tv);
			t.upos.width = w;
			t.upos.height = h;
			t.upos.depth = dp;
			
			t.upos.xFactor = parentApplication.datamapProxy.tilew;
			t.upos.yFactor = parentApplication.datamapProxy.tiled;
			t.upos.zFactor = parentApplication.datamapProxy.tileh;

			t.name = tileData.title;
			isoscene.sceneLayer.addTile(t);

			// mise à jour data
			var dt:Object = {id:tid, refId:tileData.id, pos:{x:xu, y:yu, z:zu, r:rot}, assets:[assetsUrl]};

			if ("pnj" in tileData) dt.pnj = tileData.pnj;

			// TODO check si existe déjà
			// bisard, à ce point de l'appli, on perd la ref datamapProxy, obligé de passer par parentApplication
			parentApplication.datamapProxy.tileList.push(dt);
		}
		
		private function updateDataTile (t:Object) : void
		{
			// on test si on est sur un groupe
			if (t.inGroup) {
				t = t.inGroup.owner;
			}
			
			
			var tileList:Array = datamapProxy.tileList;
			var n:int = tileList.length;
			var tid:String = t.ID;
						
			// on test si on est sur un mur
			/*if (tid.indexOf("_w_") > -1) {
				tid = tid.split("_")[2];
				t = parentApplication.isosceneHelper.getTile("_w_" + tid);
			}*/
			
			var dt:Object;
			while (--n > -1)
			{
				dt = tileList[n];
				if (dt.id == tid)
				{
					dt.pos.x = t.upos.xu;
					dt.pos.y = t.upos.yu;
					dt.pos.z = t.upos.zu;
					dt.pos.r = t.rotation;
					break;
				}
			}			
		}
				
		private function removeTileFromScene(t:Object):void
		{
			var tileList:Array = datamapProxy.tileList;
			var n:int = tileList.length;
			var tid:String = t.ID;
			var dt:Object;
			while (--n > -1)
			{
				dt = tileList[n];
				if (dt.id == tid) {
					tileList.splice(n, 1);
					break;
				}
			}
			isoscene.sceneLayer.removeTile(t);
			// !!!!! enlever les triggers associés
		}
		
		private function createTileTemplate (tileData:Object) : void
		{
			// CHANGED 2010-07-19 test PNJ
			var assetsUrl:String = tileData.assets;
			var tv:Object;
			if (tileData.pnj == 1)
			{
//				trace(this, "PNJ");
				var bloader:Object = tileLibrary.loader;
				var cl:Class = bloader.getContent(assetsUrl).loaderInfo.applicationDomain.getDefinition(tileData.title);
//				tv = objectBuilderProxy.createMCTileView(new cl());
				var mc:Object = new cl();
				var datamapProxy:Object = parentApplication.datamapProxy;
				var factor:Number = datamapProxy.avatarFactor;
				mc.scaleX = mc.scaleY = factor;
				mc.y = datamapProxy.tileh / 2;
				tv = objectBuilderProxy.createMCTileView(mc);				
			}
			else
			{
				var loader:Loader = new Loader();
				loader.load(new URLRequest(assetsUrl));
				// patch offset placement
				loader.x = tileData.ofsX;
				loader.y = tileData.ofsY;
				tv = objectBuilderProxy.createTileView(loader);
			}
			
//			var tv:Object = objectBuilderProxy.createTileView(loader);
			currentTile = objectBuilderProxy.createAbstractTile(assetsUrl, 0, 0, nsTileZpos.value, tv);
			currentTile.upos.width = tileData.width;
			currentTile.upos.height = tileData.height;
			currentTile.upos.depth = tileData.depth;
			
			currentTile.upos.xFactor = parentApplication.datamapProxy.tilew;
			currentTile.upos.yFactor = parentApplication.datamapProxy.tiled;
			currentTile.upos.zFactor = parentApplication.datamapProxy.tileh;
			
			currentTile.name = tileData.title;
			isoscene.sceneLayer.addTile(currentTile);

			// ombre
			tv = objectBuilderProxy.createTileView(createShadowTile(tileData));
			currentTileShadow = objectBuilderProxy.createAbstractTile("_shadowtile_", 0, 0, 0, tv);
			currentTileShadow.upos.xFactor = parentApplication.datamapProxy.tilew;
			currentTileShadow.upos.yFactor = parentApplication.datamapProxy.tiled;
			currentTileShadow.upos.zFactor = parentApplication.datamapProxy.tileh;
			isoscene.groundLayer.addTile(currentTileShadow);

			// grille
//			tv = objectBuilderProxy.createTileView(createGridTile(tileData));
//			currentTileGrid = objectBuilderProxy.createAbstractTile("_gridtile_", 0, 0, 2, tv);
//			isoscene.debugLayer.addTile(currentTileGrid);
		}
		
		/**
		 * 	Retourne un sprite representant la grille taille du tile
		 *	@param tileData Object
		 *	@param col uint
		 *	@return Sprite
		 */
		private function createGridTile(tileData:Object = null, col:uint = 0xFF0000):Sprite
		{
			var tw:int = datamapProxy.tilew / 2;
			var th:int = datamapProxy.tileh / 2;
			
			var dw:int = 1;	// largeur
			var dd:int = 1;	// profondeur
			if (tileData)
			{
				// on arondi à la valeur supérieur ex : width = 1.2 > dessinera 2 cases pour la largeur
				dw = tileData.width;
				var ro:Number = tileData.width;
				if (ro - dw > 0) dw+= 1;
				
				ro = tileData.depth;
				dd = tileData.depth;
				if (ro - dd > 0) dd+= 1;
			}
			
			var sp:Sprite = new Sprite();
			sp.graphics.lineStyle(1, col, 0.5);
			
			// on dessine la grille
			var gx:int;
			var gy:int;
			var n:int = dw;
			for (var i:int = 0; i <= n; i++)
			{
				gx = i * tw;
				gy = i * th;
				sp.graphics.moveTo(gx, gy);
				gx-=  tw * dd;
				gy+=  th * dd;
				sp.graphics.lineTo(gx, gy);
			}
			n = dd;
			for (i = 0; i <= n; i++)
			{
				gx = -(i * tw);
				gy = i * th;
				sp.graphics.moveTo(gx, gy);
				gx+=  tw * dw;
				gy+=  th * dw;
				sp.graphics.lineTo(gx, gy);
			}
			
			return sp;
		}
		
		/**
		 * 	Retourne une Sprite représentant l'ombre d'un tile
		 *	@param tileData Object	data d'un tile
		 *	@param col uint
		 *	@return Sprite
		 */
		private function createShadowTile(tileData:Object = null, col:uint = 0x000000):Sprite
		{
			var tw:int = datamapProxy.tilew / 2;
			var th:int = datamapProxy.tileh / 2;
			
			var dw:int = 1;	// largeur
			var dd:int = 1;	// profondeur
			if (tileData)
			{
				// on arondi à la valeur supérieur ex : width = 1.2 > dessinera 2 cases pour la largeur
				dw = tileData.width;
				var ro:Number = tileData.width;
				if (ro - dw > 0) dw+= 1;
				
				ro = tileData.depth;
				dd = tileData.depth;
				if (ro - dd > 0) dd+= 1;
			}
			
			var sp:Sprite = new Sprite();
			
			sp.graphics.beginFill(col, 0.3);
			
			var gx:int = tw * dw;
			var gy:int = th * dw;
			sp.graphics.lineTo(gx, gy);
			gx-= tw * dd;
			gy+= th * dd;
			sp.graphics.lineTo(gx, gy);
			gx-= tw * dw;
			gy-= th * dw;
			sp.graphics.lineTo(gx, gy);
			sp.graphics.lineTo(0, 0);
			sp.graphics.endFill();
			
			return sp;
		}
		
		]]>
	</mx:Script>
		
		<mx:states>
			<!-- 
				ToolBar basse : coordonnées / options / infos -->
			<mx:State name="onAdd">
				<mx:AddChild relativeTo="{parentApplication.optionBox}">
					<mx:HBox id="hbTilepos" width="100%" verticalAlign="middle">
						<mx:Label text="coordonnées   X" />
						<mx:NumericStepper id="nsTileXpos" stepSize="{tilePosStep}" maximum="100000" enabled="{inEditTileInScene}" change="nsTilePosHandler(event)" />
						<mx:Label text="Y" />
						<mx:NumericStepper id="nsTileYpos" stepSize="{tilePosStep}" maximum="100000" enabled="{inEditTileInScene}" change="nsTilePosHandler(event)" />
						<mx:Label text="Z" />
						<mx:NumericStepper id="nsTileZpos" stepSize="{tilePosStep}" minimum="-100000" maximum="100000" change="nsTilePosHandler(event)" />
						<mx:Label text="R" />
						<mx:NumericStepper id="nsTileRot" stepSize="45" maximum="360" enabled="{inEditTileInScene}" change="nsTilePosHandler(event)" />
						<mx:CheckBox id="cbHiddenTile" label="caché" click="ckTileHiddenHandler(event)" />
						<mx:CheckBox id="cbFloatTilePos" label="coordonées précises" click="cbFloatTilePosHandler(event)"/>
					</mx:HBox>
				</mx:AddChild>
				<mx:AddChild relativeTo="{parentApplication.optionBox}">
					<mx:Label id="tileInfo" />
				</mx:AddChild>
			</mx:State>
		</mx:states>
		
		<flmp:TileLibrary id="tileLibrary" width="100%" height="100%" />

</mx:Panel>


