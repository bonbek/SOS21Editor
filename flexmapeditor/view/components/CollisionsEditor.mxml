<?xml version="1.0" encoding="UTF-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:flmp="flexmapeditor.view.components.*"
	title="... collisions !"
	width="340" height="100%"
	paddingTop="10"
	backgroundColor="#E8E8E8"
	borderAlpha="1"
	highlightAlphas="[0.0,0]"
   	borderThicknessLeft="6"
   	borderThicknessRight="6"
   	borderThicknessTop="2"
	addedToStage="onAdd();"
	removedFromStage="onClose();"
	creationComplete="onCreationComplete(event);">
	
	<!-- Copyright 2009 toffer. -->
	
	<mx:Script>
	    <![CDATA[
		
		import mx.events.CloseEvent;
		import mx.events.FlexEvent;
		import mx.core.FlexSprite;
		import mx.managers.PopUpManager;
		
		import flash.display.Sprite;
		import flash.text.TextField;
		import flash.geom.Point;
		import flash.net.Responder;
		
		//---------------------------------------
		// PRIVATE & PROTECTED INSTANCE VARIABLES
		//---------------------------------------
		
		private var toSave:Boolean = false;
		
		private var cellTemplate:Object;
		
		// isoscene
		public var isoscene:Object;
		public var dataMapProxy:Object;
		public var collisionGridProxy:Object;
		public var objectBuilderProxy:Object;
		
		/**
		*	Description
		*
		* 
		*	@langversion ActionScript 3.0
		*	@playerversion Flash 9.0
		*
		*	@author Christopher Corbin
		*	@since  2009-08-09
		*/
		
		public function displayCollisions():void
		{
			var grid:Object = collisionGridProxy.grid;
			
			for (var i:int = 0; i <= dataMapProxy.dimx; i++)
			{
				for (var j:int = 0; j <= dataMapProxy.dimy; j++)
				{
					var cell:Object = grid.getCell(i, j, 0);
					if (cell.collision || cell.cost) {
						var id:String = i + "-" + j;
						var tv:Object = objectBuilderProxy.createTileView(createCCell(cell.cost, cell.throwable));
						var t:Object = objectBuilderProxy.createAbstractTile(id, i, j, 0, tv);
						isoscene.debugLayer.addTile(t);
					}
				}
			}			
		}
		
		/**
		 *	Masque le grille des collisions
		 */
		public function hideCollisions():void
		{
			isoscene.debugLayer.removeAllTile();
			stage.removeEventListener(MouseEvent.MOUSE_UP, isosceneMouseHandler, false);
		}
		
		//---------------------------------------
		// EVENT HANDLERS
		//---------------------------------------
		
		/**
		 * Reception des events souris sur pour l'isoscene
		 *  edition des collisions
		 *	@param event MouseEvent
		 */
		private function isosceneMouseHandler (event:MouseEvent) : void
		{
			// test si clique dans la viewport
			var px:int = stage.mouseX;
			var py:int = stage.mouseY;
			if (!parentApplication.viewport.container.hitTestPoint(px, py)) return;
			
			var p:Point = isoscene.debugLayer.findGridPoint(new Point (px, py));

			var grid:Object = collisionGridProxy.grid;
			
			var ocell:Object = grid.getCell(p.x, p.y, 0);

			if (ocell.collision || ocell.cost)
			{
				// on supprime la collision
				collisionGridProxy.removeCellAt(p.x, p.y, 0);
				isoscene.debugLayer.removeTile(event.target);
			}
			else
			{
				var celltype:int = 1;
				var cellcost:int = ns_cellcost.value;
				if (cb_cellthrowable.selected) celltype = 3;
				
				var cell:Object = objectBuilderProxy.createCollisionCell(cellcost ? 0 : celltype, cellcost);
				collisionGridProxy.addCell(p.x, p.y, 0, cell);
				var id:String = p.x + "-" + p.y;
				var tv:Object = objectBuilderProxy.createTileView(createCCell(cell.cost, cell.throwable));
				var t:Object = objectBuilderProxy.createAbstractTile(id, p.x, p.y, 0, tv);
				isoscene.debugLayer.addTile(t);
			}
		}
		
		/**
		*	Event handler for Creation Complete event.
		*	
		*	@see mx.events.FlexEvent
		*/
		private function onCreationComplete(event:FlexEvent = null) : void
		{
			collisionGridProxy = parentApplication.collisionGridProxy;
			isoscene = parentApplication.isosceneHelper.component;
			dataMapProxy = parentApplication.datamapProxy;
			objectBuilderProxy = parentApplication.objectBuilderProxy;
			
			onAdd();
		}
		
		private function onAdd():void
		{
			// on test si déjà initialisé
			if (!collisionGridProxy) return;
			displayCollisions();
			
			// on enleve les listeners par défaut de la scene iso
			parentApplication.viewport.isosceneListenersEnabled = false;
			
			stage.addEventListener(MouseEvent.MOUSE_UP, isosceneMouseHandler, false, 0, true);
		}
		
		/**
		*	
		*
		*/
		private function onClose() : void
		{
			hideCollisions();
//			stage.addEventListener(MouseEvent.MOUSE_MOVE, isosceneMouseHandler, false);
			stage.removeEventListener(MouseEvent.MOUSE_UP, isosceneMouseHandler, false);
		}
		
		//---------------------------------------
		// PRIVATE & PROTECTED METHODS
		//---------------------------------------
		
		/**
		 *	Affiche la liste des collisions serialisés
		 * 
		 */
		/*x: 10
        y: 13
        z: 0
        type: 1
        cost: 0*/
		public function save():void
		{
			var out:Array = [];
			var grid:Object = collisionGridProxy.grid;
			var cell:Object;
			var ocell:Object;			
			for (var i:int = 0; i < dataMapProxy.dimx; i++)
			{
				for (var j:int = 0; j < dataMapProxy.dimy; j++)
				{
					cell = grid.getCell(i, j, 0);					
					if (cell.collision || cell.cost) {
						ocell = { x:i, y:j, z:0, type:cell.value, cost:cell.cost };
						out.push(ocell);
					}
				}
			}
			parentApplication.gateway.call( "sos21Services.saveCollisions", new Responder(onResult, onFault), dataMapProxy.getData().id, out);
		}
		
		private function onResult(result:Object):void
		{
			trace(result);
			if (result)
			{
				
			} else {
				
			}
		}
		private function onFault(fault:String):void {
			trace(fault);
		}
		
		private function createCCell(cost:int, throwable:Boolean):Sprite
		{
			
			var sp:Sprite = new Sprite();
			var col:uint;

			if (cost) {
				col = 0x33FF00;
				var tf:TextField = new TextField();
				tf.text = String(cost);
				tf.x = -10;
				tf.y = 10;
				sp.addChild(tf);
			} else {
				col = 0xFF0000;
			}
			
			var s:Shape = new Shape();
			if (col) s.graphics.beginFill(col, 0.5);
			s.graphics.lineStyle(1, 0x777777);

			s.graphics.lineTo(dataMapProxy.tilew / 2, dataMapProxy.tileh / 2);
			s.graphics.lineTo(0, dataMapProxy.tileh);
			s.graphics.lineTo(-(dataMapProxy.tilew / 2), dataMapProxy.tileh / 2);
			s.graphics.lineTo(0, 0);
			
			//
			if (throwable)
			{
				s.scaleX = s.scaleY = 0.5;
				s.y = (dataMapProxy.tileh / 2) / 2;
			}
			
			sp.addChildAt(s, 0);
			
			return sp;
		}
		
	    ]]>
	</mx:Script>
	
	<mx:HBox width="100%">
		<mx:CheckBox id="cb_cellthrowable" label="traversable" />
		<mx:Text text="coût" />
		<mx:NumericStepper id="ns_cellcost" 
		            minimum="0" maximum="100" 
		            stepSize="10" 
		            value="0" 
		            width="50" />
    </mx:HBox>		
</mx:Panel>
