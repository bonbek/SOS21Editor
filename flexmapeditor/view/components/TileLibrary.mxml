<?xml version="1.0" encoding="UTF-8"?>
<mx:Box xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="onCreationComplete()">
	
	<!-- Copyright 2010 toffer. -->
	
	<mx:Script>
	    <![CDATA[
		
		import flash.events.Event;
		import flash.net.Responder;
		import flash.system.LoaderContext;
		import flash.system.ApplicationDomain;
		import flash.utils.Dictionary;

		import mx.collections.ArrayCollection;
		import mx.core.ClassFactory;

		import br.com.stimuli.loading.BulkLoader;
		import br.com.stimuli.loading.loadingtypes.LoadingItem;

		import flexmapeditor.view.components.TileThumbItemRenderer;
		
		/**
		 *	Librairie des tiles
		 *
		 *	@langversion ActionScript 3.0
		 *	@playerversion Flash 9.0
		 *
		 *	@author toffer
		 *	@since  2010-09-20
		 */
		
		//---------------------------------------
		// PUBLIC VARIABLES
		//---------------------------------------
		
		public static var loadOptions:Object = {preventCache:true, context:new LoaderContext(false, ApplicationDomain.currentDomain)};
		
		//---------------------------------------
		// PRIVATE VARIABLES
		//---------------------------------------
		
		// paire loader / data tile
		private var _loadingItems:Dictionary;

		public var loader:BulkLoader;
		
		//---------------------------------------
		// PUBLIC METHODS
		//---------------------------------------
		
		/**
		 *	Efface le contenu de la librairie
		 */
		public function clear () : void
		{
			tileList.dataProvider.removeAll();
		}
		
		/**
		 *	Mise à jour de la liste des librairies
		 *	@param result Array
		 */
		public function updateCategorys (data:Array) : void
		{
			data.unshift({title:"-- shoes --"});
			cbCategory.dataProvider = data;
		}
		
		/**
		 * Mise à jour de la librairie
		 *	@param data Object liste des data tile
		 */
		public function updateLibrary (data:Array) : void
		{
			if (!enabled) return;
			
			// freeze du composant
			enabled = false;

			clear();
			_loadingItems = new Dictionary(true);
			var loadItem:LoadingItem;
			
			// chargement des assets
			for each (var tileData:Object in data)
			{
				// injection bon chemin KK
				tileData.assets = "tiles60x30/" + tileData.assets;
				loadItem = loader.add(tileData.assets, loadOptions);
				loadItem.addEventListener(Event.COMPLETE, onLoadAsset);
				// stockage reference loader / data tile
				_loadingItems[loadItem] = tileData;
			}

			loader.addEventListener(Event.COMPLETE, onLoadAssetComplete);
			loader.start();	
		}
		
		//---------------------------------------
		// EVENT HANDLERS
		//---------------------------------------
		
		/**
		 * Réception chargement asset
		 *	@param event Event
		 */
		private function onLoadAsset (event:Event) : void
		{
			var loadItem:LoadingItem = event.target as LoadingItem;
			loadItem.removeEventListener(Event.COMPLETE, onLoadAsset);

			var tileData:Object = _loadingItems[loadItem];
			tileList.dataProvider.addItem({dataTile:tileData});
		}
		
		/**
		 * Réception chargement complet
		 *	@param event Event
		 */
		private function onLoadAssetComplete (event:Event) : void
		{
			loader.removeEventListener(Event.COMPLETE, onLoadAssetComplete);

			if (!_loadingItems) return;

			// libère mémoire
			_loadingItems = new Dictionary();

			enabled = true;
		}
		
		/**
		 * Réception selection d'un catégorie depuis combo
		 * prévu à cet effet
		 *	@param e Event
		 */
		private function onSelectCategory (event:Event) : void
		{
			// recup identifiant catégorie selectionnée
			var id:int = event.target.selectedItem.id;
			// chargement des data tiles
			parentApplication.gateway.call( "sos21Services.getTileList", new Responder(updateLibrary, onFault), id, "50");
		}
		
		/**
		 * Réception erreur remoting
		 *	@param fault Object
		 */
		private function onFault (fault:Object) : void
		{ trace(this, "erreur dans la mise à jour de la librairie"); }
		
		/**
		 *	@private
		 * init
		 */
		private function onCreationComplete () : void
		{ 
			tileList.dataProvider = new ArrayCollection([]);
			tileList.itemRenderer = new ClassFactory(TileThumbItemRenderer);
			// lib assets
			loader = BulkLoader.getLoader("tileAssets");
			if (!loader) loader = new BulkLoader('tileAssets');
			// recup liste des librairies
			parentApplication.gateway.call( "sos21Services.getTileCategoryList", new Responder(updateCategorys, onFault));
		}
		
		//---------------------------------------
		// PRIVATE & PROTECTED METHODS
		//---------------------------------------
		

	    ]]>
	</mx:Script>
	
	<!-- liste des librairies -->
	<mx:ComboBox id="cbCategory" width="100%" labelField="title"  rowCount="20"
		close="onSelectCategory(event);" />
	<!-- liste objets de la librairie en cours -->
	<mx:TileList id="tileList" width="100%" height="100%" />

</mx:Box>