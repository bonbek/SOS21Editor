<?xml version="1.0" encoding="UTF-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml"
	paddingTop="20" paddingLeft="20" paddingBottom="20" paddingRight="20"
	title="Editer les options faire parler / penser">

	<!-- Copyright 2011 toffer. -->
	
	<mx:Script>
	    <![CDATA[
		
		import mx.managers.PopUpManager;		
		import mx.collections.ArrayCollection;
		import mx.controls.dataGridClasses.DataGridColumn;
		import mx.events.DragEvent;
		
		[Embed("icons/textfield_add.png")]
		public var addIcon:Class;
		[Embed("icons/textfield_delete.png")]
		public var deleteIcon:Class;
		[Embed("icons/arrow_up.png")]
		public var arrowUpIcon:Class;
		[Embed("icons/arrow_down.png")]
		public var arrowDownIcon:Class;
		
		[Bindable]
		public var dpButtonBar:Array = [{ icon:deleteIcon, toolTip:"supprimer l'entrée selectionée", id:"remove" }];
		
		/**
		 *	Options du formulaire 106
		 * 	> Action 4 faire parler / penser
		 *
		 *	@langversion ActionScript 3.0
		 *	@playerversion Flash 9.0
		 *
		 *	@author Christopher Corbin
		 *	@since  2011-01-05
		 */
		
		//---------------------------------------
		// GETTER / SETTERS
		//---------------------------------------

		public var target:Object;
		public var options:Object;
		// Internal
		public var proxy:TriggerForm106;
		
		//---------------------------------------
		// PUBLIC METHODS
		//---------------------------------------
		
		/**
		 * Passage du tile cible et des options d'actions
		 *	@param target Object PNJHelper
		 *	@param options Object
		 */
		public function setData (target:Object, options:Object) : void
		{
			this.target = target;
			this.options = options;
			
			if (!options.txt) options.txt = taTxt.text = "jésépérlé";
			else
				taTxt.text = options.txt.replace(/<br>/gi, "\n");

			if (options.bw) nsBWidth.value = options.bw;
			cbSkin.selectedIndex = options.s;
			
			// Liens
			dpLinks.removeAll();
			if (options.l)
			{
				var l:Array = options.l.split("|");
				cbLinkLayout.selectedIndex = l.shift();
				while (l.length)
					dpLinks.addItem({tr:l.shift(),tx:l.shift()});
			}
			
			updateBallon();
		}
		
		/**
		 * Text formaté complet affiché dans la bulle
		 * avec les liens et tout et tout
		 */
		public function get fullText () : String
		{
			var txt:String = options.txt;
			if (options.l)
			{
				var ls:Array = options.l.split("|");
				var pls:Array = [];
				var la:int = ls.shift();
				while (ls.length)
					pls.push("<a href=\"event:trigger:" + ls.shift() + "#autoClose\">" + ls.shift() + "</a>");
				
				txt += "\n";
				txt += la ? pls.join("  ") : pls.join("\n");
			}

			return txt;
		}
		
		/**
		 * @private
		 * Remise en l'état du tile cible
		 */
		public function dispose () : void
		{ if (target) target.removeBallon(); }
				
		//---------------------------------------
		// EVENT HANDLERS
		//---------------------------------------
		
		/**
		 * 	Changement du texte et des options
		 * 	du ballon
		 *	@param event Event
		 */
		private function onChange (event:Event) : void
		{
			switch (event.target)
			{
				case taTxt :
				{
					options.txt = taTxt.text.replace(/[\t\r\n]/gi, "<br>");
					updateBallon();
					break;
				}
				case nsBWidth :
				{
					var v:int = nsBWidth.value;
					if (v != 200) options.bw = v;
					else
						delete options.bw;

					updateBallon();
					break;
				}
				case cbSkin :
					options.s = cbSkin.selectedIndex;
					updateBallon();
					break;
				case cbLinkLayout :
					if (options.l)
					{
						options.l = String(cbLinkLayout.selectedIndex) + options.l.slice(1);
						updateBallon();						
					}
					break;
				case dgLinks :
					serializeLinks();
					updateBallon();
					break;
			}
		}
		
		/**
		 * 	Edition de la liste des liens
		 *	@param event Event
		 */
		private function onEditEntrys (event:Event) : void
		{
			if (dgLinks.selectedItem)
			{
				dpLinks.removeItemAt(dgLinks.selectedIndex);
				serializeLinks();
				updateBallon();
			}
		}
		
		/**
		 * 	Réception d'un dépot d'action dans la liste
		 * 	des liens
		 *	@param event Event
		 */
		private function onDropLink (event:Event) : void
		{
			var devent:DragEvent = DragEvent(event);
			var dragItem:Object = devent.dragSource.dataForFormat("items")[0];
			var tid:int = dragItem.data.id;
			var ind:int = event.currentTarget.calculateDropIndex(event);
			event.preventDefault();
			var o:Object = {tr:tid, tx:"hop"};
			dpLinks.addItemAt(o, ind);
			serializeLinks();
			updateBallon()
		}
		
		//---------------------------------------
		// PRIVATE METHODS
		//---------------------------------------

		/**
		 *	@private
		 * 	Mise à jour du ballon
		 */
		private function updateBallon () : void
		{
			if (!target.ballon)
			{
				if (options.s) target.createBallon("BallonThinkPopup", 0, true, false, options.bw ? options.bw : 200);
				else
					target.createBallon("BallonPopup", 0, true, false, options.bw ? options.bw : 200).removeChild(target.ballon.closeButton);
					
			}
			else if (target.ballon.width != options.bw)
			{
				target.removeBallon();
				updateBallon();
			}

			target.ballon.text = fullText;
		}
		
		/**
		 *	@private
		 * 	Encode les liens et mets à jour les options
		 */
		private function serializeLinks () : void
		{
			var links:Array = [cbLinkLayout.selectedIndex];
			for each (var o:Object in dpLinks)
				links.push(o.tr, o.tx);
			
			options.l = links.join("|");
		}
		
		/**
		 * 	Formate les intitulés de la liste des liens
		 *	@param item Object
		 *	@param column DataGridColumn
		 *	@return String
		 */
		private function linkLabelFunction (item:Object, column:DataGridColumn) : String
		{
			var l:String = "";
			switch (column.dataField)
			{
				case "tr" :
					l = item.tr;
					break;
				case "tx" :
					l = item.tx;
					break;
			}

			return l;
		}
		
		[Bindable]
		private var dpSkin:Array = [{label:"parler"}, {label:"penser"}];
		
		[Bindable]
		private var dpLinks:ArrayCollection = new ArrayCollection();
		
		[Bindable]
		private var dpLinkLayout:Array = [{label:"alignement vertical"}, {label:"alignement horizontal"}];
		
	    ]]>
	</mx:Script>
	
	<mx:HBox>
		<mx:Label text="largeur du ballon" />
		<mx:NumericStepper id="nsBWidth" value="200" stepSize="10" maximum="400" minimum="60"
			change="onChange(event)" />
		<mx:ComboBox id="cbSkin" dataProvider="{dpSkin}"
			change="onChange(event)" />
	</mx:HBox>
	<mx:TextArea id="taTxt" width="100%" height="120"
		change="onChange(event)" />
	<mx:HBox width="100%">
		<mx:Label text="Liens" fontWeight="bold" />
		<mx:Spacer width="100%" />
		<mx:ComboBox id="cbLinkLayout" dataProvider="{dpLinkLayout}"
			change="onChange(event);" />
		<mx:ButtonBar id="buttonBar"
			direction="horizontal" buttonHeight="20" buttonWidth="20"
			horizontalAlign="center" verticalAlign="middle"				
			horizontalGap="6" verticalGap="0" focusEnabled="false"
			dataProvider="{dpButtonBar}" itemClick="onEditEntrys(event)" />
	</mx:HBox>
	<mx:DataGrid id="dgLinks" headerHeight="0" dataProvider="{dpLinks}" width="99%" rowCount="3"
		editable="true" itemFocusOut="onChange(event)" dropEnabled="true" dragDrop="onDropLink(event)">
        <mx:columns>
            <mx:DataGridColumn width="200" dataField="tx" headerText="objet"
			labelFunction="linkLabelFunction" />
			<mx:DataGridColumn width="50" dataField="tr" headerText="action"
			labelFunction="linkLabelFunction" />
        </mx:columns>
    </mx:DataGrid>
	
</mx:TitleWindow>