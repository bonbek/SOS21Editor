<?xml version="1.0" encoding="UTF-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml"
	paddingTop="20" paddingLeft="20" paddingBottom="20" paddingRight="20"
	title="Editer les variables d'environememt"
	showCloseButton="true"
	close="PopUpManager.removePopUp(this)">

	<!-- Copyright 2010 toffer. -->
	
	<mx:Script>
	    <![CDATA[
		
		import mx.managers.PopUpManager;
		import mx.collections.ArrayCollection;
		
		/**
		 *	Editeur variables d'environnement
		 *
		 *	@langversion ActionScript 3.0
		 *	@playerversion Flash 9.0
		 *
		 *	@author Christopher Corbin
		 *	@since  2010-12-17
		 */
		
		//---------------------------------------
		// PRIVATE VARIABLES
		//---------------------------------------
		
		private var edited:Array = [];
		
		//---------------------------------------
		// GETTER / SETTERS
		//---------------------------------------
		
		public var datamapProxy:Object;
		public var playerProxy:Object;
				
		// liste des variables globales
		[Bindable]
		public var globals:ArrayCollection = new ArrayCollection();

		// liste des variables locales
		[Bindable]
		public var locals:ArrayCollection = new ArrayCollection();
		
		// liste des variables globales joueur
		[Bindable]
		public var playerGlobals:ArrayCollection = new ArrayCollection();
		
		// liste des variables scène joueur
		[Bindable]
		public var playerLocals:ArrayCollection = new ArrayCollection();
		
		// Remoting
		private var _gateway:Object;
		public function set gateway (val:Object) : void
		{
			_gateway = val;
			loadGlobals();
		}
		
		/**
		 * 	Retoune une variable globale
		 *	@param id int
		 *	@return Object
		 */
		public function getGlobal (id:int) : Object
		{
			var global:Object;
			for each (var o:Object in globals)
			{
				if (o.id == id)
				{
					global = o;
					break;
				}
			}
			
			return global;
		}
		
		/**
		 * 	Retourne une variable locale
		 *	@param id int
		 *	@return Object
		 */
		public function getLocal (id:int) : Object
		{
			loadLocals();
			return locals.source[id];
		}
		
		/**
		 * Flag en édition des variables globales
		 */
		public function get editGlobals () : Boolean
		{ return tn.selectedIndex == 0; }
		
		/**
		 * Flag en édition des variables lovales
		 */
		public function get editLocals () : Boolean
		{ return tn.selectedIndex == 1; }
		
		/**
		 * Flag en édition des variables globales joueur
		 */
		public function get editPlayerGlobals () : Boolean
		{ return tn.selectedIndex == 2; }

		/**
		 * Flag en édition des variables locales joueur
		 */
		public function get editPlayerLocals () : Boolean
		{ return tn.selectedIndex == 3; }
		
		//---------------------------------------
		// EVENT HANDLERS
		//---------------------------------------
		
		/**
		 * 	Edition d'une valeur.
		 * 	Stockage des variables éditées
		 *	@param event Event
		 */
		private function onItemEdit (event:Event) : void
		{
			var item:Object;
			switch (true)
			{
				// > Modification d'une var globale
				case editGlobals :
				{
					item = dgGlobals.selectedItem ? dgGlobals.selectedItem : null;
					break;
				}
				// > Modification d'une var locale
				// on ne stock pas la var éditée, tout le tableau
				// sera reécrit lors de la sauvegarde (voir save)
				case editLocals :
				{
					item = "hle"; // "has locals edited"
					break;
				}
				// > Modification variable globale joueur
				case editPlayerGlobals :
				{
					item = dgPGlobals.selectedItem ? dgPGlobals.selectedItem : null;
					break;
				}
				// > Modification variable locale joueur
				case editPlayerLocals :
				{
					item = dgPLocals.selectedItem ? dgPLocals.selectedItem : null;
					break;
				}
			}
			
			// stockage var éditée
			if (item) {
				if (edited.indexOf(item) == -1) edited.push(item);
			}
			
		}
		
		/**
		 *	@private
		 * 	Création d'une nouvelle variable
		 */
		private function createNew () : void
		{
			switch (true)
			{
				// > Nouvelle globale
				case editGlobals :
				{
					_gateway.call(	"sos21Services.Globals",
									new Responder(onNewResult, onFault), "new");
					break;
				}
				// > Nouvelle locale
				case editLocals :
				{
					var no:Object = {id:locals.length, name:"NOUV VAR", value:"0"};
					locals.addItem(no);
					datamapProxy.env.push(no);

					_gateway.call(	"sos21Services.updateDataMap",
									new Responder(onNewResult, onFault),
									datamapProxy.getData().id, "env", datamapProxy.env);
					break;
				}
				// > Nouvelle globale joueur
				case editPlayerGlobals :
				{
					// TODO il faut se référencer à une var globale existante
					// passer par l'onglet "Globales Jeu" et ajouter un bouton "Dupliquer pour le joueur"
					break;
				}
				// > Nouvelle locale joueur
				case editPlayerLocals :
				{
					// TODO il faut se référencer à une var locale existante
					// passer par l'onglet "Globales Jeu" et ajouter un bouton "Dupliquer pour le joueur"					
					break;
				}
			}
		}
		
		/**
		 *	@private
		 * 	Suppression d'une variable
		 */
		private function removeVar () : void
		{
			switch (true)
			{
				case editGlobals :
				{
					// TODO, pas forcement, ça veut dire qu'il faudrait enlevé les références
					// du joueur aussi, quoique...
					break;
				}
				case editLocals :
				{
					// TODO, pas forcement, ça veut dire qu'il faudrait enlevé les références
					// du joueur aussi, quoique...
					break;
				}
				// > Suppression d'une var gobale joueur
				case editPlayerGlobals :
				{
					var o:Object = dgPGlobals.selectedItem;
					if (o)
					{
						// Balise delete (voir services + PlayerProxy)
						o.value = "_|DEL|_";
						edited.push(o);
						playerGlobals.removeItemAt(dgPGlobals.selectedIndex);
					}
					break;
				}
				// > Suppression d'une var locale joueur
				case editPlayerLocals :
				{
					o = dgPLocals.selectedItem;
					if (o)
					{
						// Balise delete (voir services + PlayerProxy)
						o.value = "_|DEL|_";
						edited.push(o);
						playerLocals.removeItemAt(dgPLocals.selectedIndex);
					}
					break;
				}
			}
		} 
		
		/**
		 *	Réception liste des globales
		 *	@param result Array
		 */
		private function onGlobalsResult (result:Array) : void
		{ globals.source = result; }
		
		/**
		 * 	Réception création d'une variable
		 *	@param result Object
		 */
		private function onNewResult (result:Object) : void
		{
			switch (true)
			{
				case editGlobals :
				{
					globals.addItem(result);
					break;
				}
				case editLocals :
				{ break; }
				case editPlayerGlobals :
				{ break; }
				case editPlayerLocals :
				{ break; }
			}
		}
		
		/**
		 * 	Réception d'erreur
		 *	@param fault Object
		 */
		private function onFault (fault:Object) : void
		{ trace(this, "fault", fault); }
		
		/**
		 * 	Réception Sauvegarde
		 *	@param result Array
		 */
		private function onSaveResult (result:Object) : void
		{ 
			edited.splice(0);
			enabled = true;
		}
		
		/**
		 * 	Changement d'onglet
		 *	@private
		 */
		private function tabChange () : void
		{
			// reset des éditions
			if (edited.length > 0) edited.splice(0);
			
			switch (true)
			{
				case editGlobals :
					currentState = null;
					loadGlobals();
					break;
				case editLocals :
					currentState = null;
					loadLocals();
					break;
				case editPlayerGlobals :
					currentState = "playerEnv";
					loadPlayerGlobals();
					break;
				case editPlayerLocals :
					currentState = "playerEnv";
					loadPlayerLocals();
					break;
			}
		}
		
		//---------------------------------------
		// PRIVATE METHODS
		//---------------------------------------
		
		/**
		 *	@private
		 * 	Charge les variables globales joueur
		 */
		private function loadPlayerGlobals () : void
		{
			playerGlobals.removeAll();
			var pgbls:Object = playerProxy.getData().globals;
			var pg:Object;
			for each (var g:Object in globals)
			{
				pg = playerProxy.getGlobalEnv(g.id);
				if (pg) playerGlobals.addItem({id:g.id, name:g.name, value:pg});
			}
		}
		
		/**
		 *	@private
		 * 	Charge les variables locales joueur
		 */
		private function loadPlayerLocals () : void
		{
			playerLocals.removeAll();
			loadLocals();
			var plcls:Object = playerProxy.getData().locals;
			var pl:Object;
			var l:Object;
			for (var i:int = 0; i < locals.source.length; i++)
			{
				pl = playerProxy.getLocalEnv(i);
				if (pl)
				{
					l = locals.source[i];
					playerLocals.addItem({id:l.id, name:l.name, value:pl});
				}
			}
		}
		
		/**
		 *	@private
		 * 	Charge les variables globales
		 */
		private function loadGlobals () : void
		{ _gateway.call("sos21Services.Globals", new Responder(onGlobalsResult, onFault), "list"); }
		
		/**
		 *	@private
		 * 	Charge les variables locales
		 */
		private function loadLocals () : void
		{
			var env:Array = [];
			for each (var o:Object in datamapProxy.env)
				env.push({id:o.id, name:o.name, value:o.value});

			locals.source = env;
		}
		
		/**
		 *	@private
		 * 	Sauvegarde le domaine variables affichées
		 */
		private function save () : void
		{
			if (edited.length < 1) return;
			
			switch (true)
			{
				// > Sauvegarde des modifs sur variables globales
				case editGlobals :
				{
					enabled = false;
					// maj serveur
					_gateway.call(	"sos21Services.Globals",
									new Responder(onSaveResult, onFault),
									"update", edited);				
					break;
				}
				// > Sauvegarde des modifs sur variables locales
				case editLocals :
				{
					enabled = false;
					var env:Array = [];
					var no:Object;
					for each (var o:Object in locals)
						env.push({id:o.id, name:o.name, value:o.value});

					// maj live
					datamapProxy.getData().env = env;
					// maj version serveur
					_gateway.call(	"sos21Services.updateDataMap",
									new Responder(onSaveResult, onFault),
									datamapProxy.getData().id, "env", env);
					break;
				}
				// > Sauvegarde des modifs sur les variables globales joueur
				case editPlayerGlobals :
				{
					enabled = false;
					// A la sauvage
					for each (o in edited)
						playerProxy.setGlobalEnv(o.id, o.value);

					onSaveResult(null);					
					break;
				}
				// > Sauvegarde des modifs sur les variables locales joueur
				case editPlayerLocals :
				{
					enabled = false;
					// A la sauvage
					for each (o in edited)
						playerProxy.setLocalEnv(o.id, o.value);
					
					onSaveResult(null);
					break;
				}
			}
		}
		
	    ]]>
	</mx:Script>
	
	<mx:states>
		<mx:State name="playerEnv">
			<mx:RemoveChild target="{btNew}" />
			<mx:AddChild relativeTo="{btnContainer}" position="firstChild">
				<mx:Button id="btRemove" label="suprimer" click="removeVar()" />
			</mx:AddChild>
		</mx:State>
	</mx:states>
	
	<mx:TabNavigator id="tn" width="100%" height="100%" change="tabChange()">
		<mx:Box label="Jeu">
			<mx:DataGrid id="dgGlobals" dataProvider="{globals}" rowCount="15" editable="true" itemEditEnd="onItemEdit(event);">
				<mx:columns>
					<mx:DataGridColumn width="40" dataField="id" headerText="id" editable="false" />
					<mx:DataGridColumn width="240" dataField="name" headerText="nom" />
					<mx:DataGridColumn width="100" dataField="value" headerText="valeur" />
				</mx:columns>
			</mx:DataGrid>
		</mx:Box>
		<mx:Box label="Scène">
			<mx:DataGrid id="dgLocals" dataProvider="{locals}" rowCount="15" editable="true" itemEditEnd="onItemEdit(event);">
				<mx:columns>
					<mx:DataGridColumn width="40" dataField="id" headerText="id" editable="false" />
					<mx:DataGridColumn width="240" dataField="name" headerText="nom" />
					<mx:DataGridColumn width="100" dataField="value" headerText="valeur" />
				</mx:columns>
			</mx:DataGrid>
		</mx:Box>
		<mx:Box label="Joueur">
			<mx:DataGrid id="dgPGlobals" dataProvider="{playerGlobals}" rowCount="15" editable="true" itemEditEnd="onItemEdit(event);">
				<mx:columns>
					<mx:DataGridColumn width="40" dataField="id" headerText="id" editable="false" />
					<mx:DataGridColumn width="240" dataField="name" headerText="nom" editable="false" />
					<mx:DataGridColumn width="100" dataField="value" headerText="valeur" />
				</mx:columns>
			</mx:DataGrid>
		</mx:Box>
		<mx:Box label="Joueur scène">
			<mx:DataGrid id="dgPLocals" dataProvider="{playerLocals}" rowCount="15" editable="true" itemEditEnd="onItemEdit(event);">
				<mx:columns>
					<mx:DataGridColumn width="40" dataField="id" headerText="id" editable="false" />
					<mx:DataGridColumn width="240" dataField="name" headerText="nom" editable="false" />
					<mx:DataGridColumn width="100" dataField="value" headerText="valeur" />
				</mx:columns>
			</mx:DataGrid>
		</mx:Box>
	</mx:TabNavigator>

	<mx:HBox id="btnContainer" width="100%">
		<mx:Button id="btNew" label="nouveau" click="createNew()" />
		<mx:Spacer width="100%" />
		<mx:Button id="btSave" label="sauvegarder" click="save()" />
	</mx:HBox>
</mx:TitleWindow>