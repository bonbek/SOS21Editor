<?xml version="1.0" encoding="UTF-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:flmp="flexmapeditor.view.components.*"
	width="100%" height="100%"
	creationComplete="onCreationComplete(event);">

	<!-- Copyright 2009 toffer. -->
	
	<mx:Script>
	    <![CDATA[
		
		import flash.net.Responder;
		import flash.events.MouseEvent;
		
		import mx.events.FlexEvent;
		import mx.controls.Text;
		import mx.events.ItemClickEvent;
		import mx.managers.PopUpManager;
		import mx.events.CloseEvent;
		
		/**
		 *	Formulaire additionnel pour les triggers popup html
		 *
		 *	@langversion ActionScript 3.0
		 *	@playerversion Flash 9.0
		 */
		
		//---------------------------------------
		// PUBLIC VARIABLES
		//---------------------------------------
		
//		public var editor:HtmlEditor;
		
		// dp contenu texte du tooltip
		[Bindable]
		public var textAreaContent:String = "";
		// dp titre / info
		[Bindable]
		public var titleText:String = "";
		
		/*// assets boutons aperçu / éditer
		[Embed("icons/cog_add.png")]
		public var cog_addIcon:Class;*/
		[Embed("icons/icon_page_edit.png")]
		public var editIcon:Class;
		
		// dp boutons éditer / ajouter / supprimer les triggers chainés (au trigger en cours de sélection)
		[Bindable]
		public var dpButtonBarPE:Array = [ { icon:editIcon, toolTip:"éditer", data:"edit" } ];
		
		//---------------------------------------
		// GETTER / SETTERS
		//---------------------------------------
		
		private var firstInit:Boolean = true;
		
		// trigger en pris en charge par cette instance
		private var _trigger:Object;
		[Bindable]
		public function set trigger(t:Object):void {
			_trigger = t;
			if (!firstInit)
			{
				onCreationComplete();
			}		
		}
		
		public function get trigger():Object {
			return _trigger;
		}
		
		//---------------------------------------
		// PUBLIC METHODS
		//---------------------------------------
		
		/**
		 * Retourne la liste des Arguments "vitaux" pour ce type
		 * de trigger
		 * @private
		 */
		public function getSarfeArguments():Array
		{
			// TODO argument skin
			return ["id", "skin", "width", "height", "x", "y"];
		}
		
		/**
		 *	Appelé au changement du trigger à éditer
		 * 
		 *	@private
		 */
		public function safeSave():void
		{
			/*var txt:String = texArea.htmlText;							
			// sauvergarde du text dans la DB
			var id:int = _trigger.arguments["id"];
			if (id)
				parentApplication.gateway.call( "sos21Services.saveContent", new Responder(onDataSaved, onDataSaved), id, txt);*/
		}
		
		/**
		 *	Appelé à la suppression d'un trigger
		 *  Opération de nettoyage, suppression de l'entrée dans
		 *  la DB
		 *	@param	trigger	 qui va être supprimé (si pas ref interne est prise)
		 *	@private
		 */
		public function onDeleteTrigger(trigger:Object = null):void
		{
			var tr:Object = trigger ? trigger : _trigger;
						var id:int = tr.arguments["id"];
						if (id)
							parentApplication.gateway.call( "sos21Services.deleteContent", new Responder(onDataDelete, onDataDelete), id);
		}
		
		/**
		 *	Appelé par TriggersEditor avant la sauvegarde
		 *	Lance la sauvegarde du text dans la DB table contents
		 *	@private
		 */
		public function updateOnSave():void
		{
			/*var txt:String = texArea.htmlText;						
			// sauvergarde du text dans la DB
			var id:int = _trigger.arguments["id"];
			if (id)
				parentApplication.gateway.call( "sos21Services.saveContent", new Responder(onDataSaved, onDataSaved), id, txt);*/
		}
		
		//---------------------------------------
		// EVENT HANDLERS
		//---------------------------------------
		
		/**
		 * Reception fermeture de l'éditeur
		 * 
		 *	@param event CloseEvent
		 */
		private function editorCloseHandler(event:CloseEvent):void
		{
			/*editor.saveBtn.removeEventListener(MouseEvent.CLICK, editorSaveButtonHandler, false);
			editor.removeEventListener(CloseEvent.CLOSE, editorCloseHandler, false);
			editor = null;*/
			htmlEditor.saveBtn.removeEventListener(MouseEvent.CLICK, editorSaveButtonHandler, false);
			htmlEditor.removeEventListener(CloseEvent.CLOSE, editorCloseHandler, false);
		}
		
		/**
		 *	Réception click sur bouton sauvegarder dans l'éditeur
		 * 
		 *	@param event MouseEvent
		 */
		private function editorSaveButtonHandler(event:MouseEvent):void
		{
			// recup du html
			var txt:String = htmlEditor.htmlContent;
			// mise à jour de la preview
			textAreaContent = txt;
			// sauvegarde
			saveHtml();
		}
		
		/**
		 *	Réception events bar de boutons apperçu / éditer
		 * 
		 *	@param event ItemClickEvent
		 */
		private function cbuttonBarPEHandler(event:ItemClickEvent):void
		{
			switch (event.item.data)
			{
				case "preview" :
				{					
					break;
				}
				case "edit" :
				{
					currentState = "showEditor";
					PopUpManager.addPopUp(htmlEditor, parentApplication.viewport, true);
					PopUpManager.centerPopUp(htmlEditor);
					htmlEditor.htmlContent = textAreaContent;
					htmlEditor.saveBtn.addEventListener(MouseEvent.CLICK, editorSaveButtonHandler, false, 0, true);
					htmlEditor.addEventListener(CloseEvent.CLOSE, editorCloseHandler, false, 0, true);
					break;
				}
			}
		}
		
		/**
		 *	Réception event remoting après tentative de suppression
		 *  d'une entrée
		 *	@param res Object
		 */
		private function onDataDelete(res:Object):void
		{
			var suc:Boolean = Boolean(res);
			if (res)
				trace("--@ contenu htmlpopup db::contents > id " + suc + " supprimé" );
			else
				trace("-!! echec de la suppression contenu htmlpopup db:contents > id " + suc);
		}
		
		/**
		 *  Réception event remoting après tentative de sauvegarde
		 *	@param result Boolean
		 */
		private function onDataSaved(success:Boolean):void
		{
			var cid:int = _trigger.arguments["id"];
			if (success)
				trace("--@ contenu htmlpopup " + _trigger.id + " sauvegardé (db::contents id " + _trigger.arguments['id'] + ")");
			else
				trace("-!! echec de la sauvergarde contenu htmlpopup " + _trigger.id + "(db::contents id " + _trigger.arguments['id'] + ")");
		}
		
		private function onRecieveContent(content:Object):void
		{
			textAreaContent = content.body;
			this.visible = true;
		}
		
		/**
		 *  Réception event remoting à l'insertion d'un nouvel eneregistrement
		 *  dans la table content, typiquement quand le trigger associé à cette
		 *  classe n'avais pas d'identifiant de liaison à un contenu; 
		 *	@param result Object
		 */
		private function onNewContentCreated(result:Object):void
		{
			if (result > 1)
			{
				// mise à jour de l'affichage & data;
				_trigger.arguments["id"] = result;
				titleText = "popup html (id DB " + _trigger.arguments["id"] + ")";
				textAreaContent = "un nouveau contenu html";
				this.visible = true;
			} else {
				// erreur
				titleText = "une erreur est survenue, hopla, il faut recharger la page :-s ";
			}
		}
		
		/**
		 *	Initialisation du composant
		 *	@see mx.events.FlexEvent
		 */
		private function onCreationComplete(event:FlexEvent = null) : void
		{ 
			firstInit = false;
			if (!_trigger.arguments["id"]) // on à pas de ref contenu à la DB
			{
				// on lance la créa d'un nouvelle entrée dans la DB tooltip map26 - trigger 39
				var tit:String = "popup html map" + parentApplication.datamapProxy.getData().id + " - trigger " + _trigger.id;
				parentApplication.gateway.call( "sos21Services.insertContent", new Responder(onNewContentCreated, onNewContentCreated), tit);
			} else {	// on a une ref, on la recup
				// mise à jour du champ info
				titleText = "poupup HTML (id DB " + _trigger.arguments["id"] + ")";
				// recupération du contenu
				parentApplication.gateway.call( "sos21Services.getContent", new Responder(onRecieveContent, onRecieveContent), _trigger.arguments["id"]);
			}
			this.visible = false;
		}
		
		//---------------------------------------
		// PRIVATE METHODS
		//---------------------------------------
		
		/**
		 *	Sauvegarde le contenu html dans la DB (table contents) 
		 * 
		 *	@private
		 */
		private function saveHtml():void
		{
			var id:int = _trigger.arguments["id"];
			if (id)
				parentApplication.gateway.call( "sos21Services.saveContent", new Responder(onDataSaved, onDataSaved), id, textAreaContent);
		}
		
	    ]]>
	</mx:Script>
	
	<mx:states>
		<mx:State name="showEditor">
			<mx:AddChild relativeTo="{parentApplication.viewport}">
				<flmp:HtmlEditor id="htmlEditor" close="PopUpManager.removePopUp(htmlEditor)" />
			</mx:AddChild>
		</mx:State>
	</mx:states>
	
	<mx:HBox width="100%">
		<mx:Label text="{titleText}" />
		<mx:ButtonBar id="cbuttonBarPE"				
			direction="horizontal" buttonHeight="20" buttonWidth="20"
			horizontalAlign="right" verticalAlign="middle"
			horizontalGap="6" verticalGap="0" focusEnabled="false"
			dataProvider="{dpButtonBarPE}" itemClick="cbuttonBarPEHandler(event);"/>
	</mx:HBox>
	<mx:TextArea id="texArea" width="100%" height="100"
				editable="true" htmlText="{textAreaContent}" />
</mx:VBox>