<?xml version="1.0" encoding="UTF-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
	width="100%" height="100%"
	creationComplete="onCreationComplete();">

	<!-- Copyright 2009 toffer. -->
	
	<mx:Script>
	    <![CDATA[
		
		import mx.collections.ArrayCollection;
		import mx.collections.Sort;
		import mx.collections.SortField;
		import mx.events.ItemClickEvent;
		
		/**
		 *	Formulaire additionnel pour triggers type changement de map
		 *
		 *	@langversion ActionScript 3.0
		 *	@playerversion Flash 9.0
		 */
		
		[Embed("icons/textfield_add.png")]
		public var addIcon:Class;
		[Embed("icons/textfield_delete.png")]
		public var deleteIcon:Class;
		[Embed("icons/arrow_up.png")]
		public var arrowUpIcon:Class;
		[Embed("icons/arrow_down.png")]
		public var arrowDownIcon:Class;

		[Bindable]
		public var dpButtonBar:Array = [	{ icon:addIcon, toolTip:"ajouter une entrée", id:"add" },
											{ icon:deleteIcon, toolTip:"supprimer l'entrée selectionée", id:"remove" },
											{ icon:arrowUpIcon, toolTip:"déplacer", id:"up"},
											{ icon:arrowDownIcon, toolTip:"déplacer", id:"down"} ];
		
		// dp combo liste des maps
		[Bindable]
		public var dpMaps:ArrayCollection = new ArrayCollection();
		
		// dp liste des destinations
		[Bindable]
		public var dpDests:ArrayCollection = new ArrayCollection([]);
		
		[Bindable]
		private var dpDestTrans:ArrayCollection = new ArrayCollection([]);
		
		[Bindable]
		public var dpTrans:ArrayCollection = new ArrayCollection();
		
		//---------------------------------------
		// PRIVATE VARIABLES
		//---------------------------------------
	
		private var firstInit:Boolean = true;
		private var _trigger:Object;
	
		//---------------------------------------
		// GETTER / SETTERS
		//---------------------------------------
		
		[Bindable]
		public function set trigger (t:Object) : void
		{
			_trigger = t;

			if (!firstInit) onCreationComplete();
			else
				firstInit = false;
		}

		public function get trigger() : Object
		{ return _trigger; }
		
		//---------------------------------------
		// PUBLIC METHODS
		//---------------------------------------

		/**
		 *	Appelé au changement du trigger à éditer
		 *	@private
		 */
		public function safeSave () : void
		{
			updateOnSave();
		}
		
		/**
		 * Retourne la liste des Arguments "vitaux" pour ce type
		 * de trigger
		 * @private
		 */
		public function getSarfeArguments () : Array
		{ return ["mapid", "entryPoint", "injectTP", "dest"]; }
		
		/**
		 *	Appelé à la suppression d'un trigger
		 *  
		 *	@param	trigger	 qui va être supprimé
		 *	@private
		 */
		public function onDeleteTrigger (trigger:Object = null) : void
		{ }
		
		/**
		 *	Appelé par TriggersEditor avant la sauvegarde
		 *	Test et clean l'argument entryPoint
		 *	@private
		 */
		public function updateOnSave () : void
		{
			var dest:Array = [];
			var o:Object;
			for each (var d:Object in dpDests.source)
			{
				o = {title:d.title, map:d.map};
				if (d.trans) o.trans = d.trans;
				if (d.entryPoint) o.entryPoint = d.entryPoint;
				dest.push(o);
			}

			_trigger.arguments["dest"] = dest;
			/*_trigger.arguments["mapid"] = cb_mapList.selectedItem.id;
			if (ti_xentryPoint.text.length >= 1)
			{
				var x:int = int(ti_xentryPoint.text);
				var y:int = int(ti_yentryPoint.text);
				var z:int = int(ti_zentryPoint.text);
				if (x + y + z > 0)
				{
					_trigger.arguments["entryPoint"] = String(x + "/" + y + "/" + z);
					return
				}
			}
			
			// mise à jour du formulaire
			ti_xentryPoint.text = "";
			ti_yentryPoint.text = "";
			ti_zentryPoint.text = "";
			// suppression de l'argument invalide
			delete _trigger.arguments["entryPoint"];*/
		}
		
		/**
		 * Retourne descripteur map
		 *	@param id int
		 *	@return Object
		 */
		public function getMap (id:int) : Object
		{
			for each (var m:Object in dpMaps)
				if (m.id == id) return m;
			
			return null;
		}
		
		/**
		 * Retourne descripteur map
		 *	@param id int
		 *	@return Object
		 */
		public function getTrans (id:int) : Object
		{
			for each (var d:Object in dpTrans)
				if (d.id == id) return d;
			
			return null;
		}
		
		/**
		 *	@private
		 * Rafraîchit la liste des destinations
		 */
		public function refreshDestsList () : void
		{
			dpDests.removeAll();
			dpDestTrans.removeAll();

			// mise à jour liste des destinations
			if (_trigger.arguments["dest"])
			{
				for each (var dest:Object in _trigger.arguments["dest"])
					dpDests.addItem(dest);
			}
			// patch ancienne version trigger
			else
			{
				var it:Object = {};
				if (_trigger.arguments["mapid"])
				{
					var m:Object = getMap(_trigger.arguments["mapid"]);
					it.map = m.id;
					it.title = m.title;
				}
				
				if (_trigger.arguments["entryPoint"])
					it.entryPoint = _trigger.arguments["entryPoint"];

				dpDests.addItem(it);
			}
		}
		
		public function refreshDestTrans () : void
		{
			dpDestTrans.removeAll();

			var dest:Object = dgDests.selectedItem;
			if (!dest) return;
			if (!dest.trans) return;
			
			var dtrans:Array;
			var trans:Object;
			for each (var strans:String in String(dest.trans).split("#"))
			{
				dtrans = strans.split("|");
				trans = getTrans(dtrans[0]);
				dpDestTrans.addItem({type:trans.type,
									title:dtrans.length > 1 ? dtrans[1] : trans.title,
									info:dtrans.length > 2 ? dtrans[2] : "",
									trans:trans});
			}
		}
		
		/**
		 * Editer une destination
		 *	@param dest Object
		 */
		public function editDest (dest:Object) : void
		{ 
			currentState = 'editDest';
			
			if (int(dest.map) > 0)
			{
				// selection combo
				cbMapList.selectedItem = getMap(dest.map);
				// intitulé
				tiTitle.text = dest.title != cbMapList.selectedItem.title ? dest.title : "";
				// point d'entrée
				tiEntryPoint.text = dest.entryPoint;				
			}
			else
			{
				// intitulé
				tiTitle.text = "";
				// point d'entrée
				tiEntryPoint.text = "";				
			}
		}

		/**
		 * Editer un transport
		 *	@param dest Object
		 */
		public function editTrans (trans:Object) : void
		{ 
			currentState = "editTrans";

			// sélection combo
			cbTransList.selectedItem = getTrans(trans.trans.id);
			// intitulé
			tiTranTitle.text = trans.title.length > 0 ? trans.title
												 	: cbTransList.selectedItem.title;
			taTransInfo.text = trans.info;
		}
		
		//---------------------------------------
		// EVENT HANDLERS
		//---------------------------------------
		
		/**
		 *	Mise à jour item destination
		 */
		private function updateDest () : void
		{
			var dest:Object = dgDests.selectedItem;
			// id scène destination
			dest.map = dpMaps.getItemAt(cbMapList.selectedIndex).id;
			// intitulé
			dest.title = tiTitle.text.length > 5 ? tiTitle.text : dpMaps.getItemAt(cbMapList.selectedIndex).title;
			// point d'entrée
			if (tiEntryPoint.text.length > 3) dest.entryPoint = tiEntryPoint.text;
			else
				delete dest.entryPoint;

			dpDests.itemUpdated(dest);
		}
		
		/**
		 * Mise à jour item transport
		 *	@param trans Object
		 */
		private function updateTrans (trans:Object = null) : void
		{
			if (trans)
			{				
				// descripteur transport (dp liste des transports)
				var dtrans:Object = dpTrans.getItemAt(cbTransList.selectedIndex);
				// item à updater
				var trans:Object = dgTrans.selectedItem;
				// type
				trans.type = dtrans.type;
				// intitulé
				trans.title = tiTranTitle.text != dtrans.title &&  tiTranTitle.text.length > 3 ? tiTranTitle.text : dtrans.title;
				trans.info = taTransInfo.text;
				trans.trans = dtrans;

				dpDestTrans.itemUpdated(trans);
			}
			
			// version encodée
			var entrans:Array = [];
			var strans:String;
			for each (trans in dpDestTrans)
			{
				strans = trans.trans.id;
				strans += "|" + trans.title;
				if (trans.info.length > 2) strans += "|" + trans.info;
				entrans.push(strans);
			}
			
			if (entrans.length > 0) dgDests.selectedItem.trans = entrans.join("#");
			else
				delete dgDests.selectedItem.trans;
		}
		
		/**
		 * Réception edition des entrées dg destinations
		 *	@param event ItemClickEvent
		 */
		private function editDestEntrys (event:ItemClickEvent) : void
		{
			switch(event.item.id)
			{
				case "add" :
					var entry:Object = {title:"", map:0, entryPoint:""};
					dpDests.addItem(entry);
					dgDests.selectedItem = entry;
					refreshDestTrans();
					editDest(entry);
					break;
				case "remove" :
					if (dgDests.selectedItem)
					{
						dpDests.removeItemAt(dgDests.selectedIndex);
						refreshDestTrans();
					}
					break;
				case "up" :
					entry = dgDests.selectedItem;
					if (entry)
					{
						var ind:int = dgDests.selectedIndex;
						if (ind - 1 > -1)
						{
							dpDests.removeItemAt(ind);
							dpDests.addItemAt(entry, --ind);
							dgDests.selectedItem = entry;
							dgDests.scrollToIndex(ind);
						}							
					}
					break;
				case "down" :
					entry = dgDests.selectedItem;
					if (entry)
					{
						ind = dgDests.selectedIndex;
						if (ind + 1 < dpDests.length)
						{
							dpDests.removeItemAt(ind)
							dpDests.addItemAt(entry, ++ind);
							dgDests.selectedItem = entry;
							dgDests.scrollToIndex(ind);
						}
							
					}
					break;
			}
			updateOnSave();
		}
		
		/**
		 * Réception edition des entrées dg destinations
		 *	@param event ItemClickEvent
		 */
		private function editTransEntrys (event:ItemClickEvent) : void
		{
			switch(event.item.id)
			{
				case "add" :
					var entry:Object = {type:"", title:"", info:"", trans:getTrans(1)};
					dpDestTrans.addItem(entry);
					dgTrans.selectedItem = entry;
					editTrans(entry);					
					break;
				case "remove" :
					if (dgTrans.selectedItem) dpDestTrans.removeItemAt(dgTrans.selectedIndex);
					break;
				case "up" :
					entry = dgTrans.selectedItem;
					if (entry)
					{
						var ind:int = dgTrans.selectedIndex;
						if (ind - 1 > -1)
						{
							dpDestTrans.removeItemAt(ind);
							dpDestTrans.addItemAt(entry, --ind);
							dgTrans.selectedItem = entry;
							dgTrans.scrollToIndex(ind);
						}							
					}
					break;
				case "down" :
					entry = dgTrans.selectedItem;
					if (entry)
					{
						ind = dgTrans.selectedIndex;
						if (ind + 1 < dpDestTrans.length)
						{
							dpDestTrans.removeItemAt(ind)
							dpDestTrans.addItemAt(entry, ++ind);
							dgTrans.selectedItem = entry;
							dgTrans.scrollToIndex(ind);
						}
							
					}
					break;
			}
			updateTrans();
			updateOnSave();
		}
		
		private function onTransportationListResult (result:Array) : void
		{
			dpTrans.source = result;
			refreshDestsList();
		}
		
		private function onTransportationListFault (fault:String) : void
		{ trace("erreur de chargement liste des transpots ", this); }
		
		/**
		 * Réception lite des maps
		 *	@param result Array
		 */
		private function onMapListResult (result:Array) : void
		{
			// stock liste des map
			dpMaps.source = result;
			if (!dpMaps.sort)
			{
				var sort:Sort = new Sort();
				sort.fields = [new SortField("title", false)];
				dpMaps.sort = sort;
				dpMaps.refresh();
			}
			
			refreshDestsList();
		}
		
		private function onMapListFault (fault:String) : void
		{ trace("erreur de chargement liste des map ", this); }
		
		/**
		 *	Event handler for Creation Complete event.
		 */
		private function onCreationComplete () : void
		{			
			// on recup la liste des maps
			parentApplication.gateway.call( "sos21Services.getMapList", new Responder(onMapListResult, onMapListFault));
			parentApplication.gateway.call( "sos21Services.getTransportationList", new Responder(onTransportationListResult, onTransportationListFault));
		}

	    ]]>
	</mx:Script>
	
	<!-- <mx:Label width="100%" text="aller à la map" />
	<mx:ComboBox id="cb_mapList" width="300"
		 				rowCount="10"
						dataProvider="{mapList}"
						labelField="title" />
	<mx:Label width="100%" text="point d'entrée :" />
	<mx:HBox width="100%">
		<mx:Label text="x :" />
		<mx:TextInput id="ti_xentryPoint" editable="true" maxChars="3" restrict="0-9" />
		<mx:Label text="y :" />
		<mx:TextInput id="ti_yentryPoint" editable="true" maxChars="3" restrict="0-9" />
		<mx:Label text="z :" />
		<mx:TextInput id="ti_zentryPoint" editable="true" maxChars="3" restrict="0-9" />
	</mx:HBox> -->
	
	<mx:states>
		<!-- options editer destination -->
		<mx:State name="editDest">
			<mx:SetProperty target="{dgDests}" name="enabled" value="false" />
			<mx:RemoveChild target="{bDest}" />
			<mx:RemoveChild target="{bTrans}" />
			<mx:AddChild>
				<mx:Box paddingTop="4" paddingBottom="4" paddingLeft="4" backgroundColor="#E8E8E8" width="100%">
					<mx:ComboBox id="cbMapList" width="320" rowCount="10" labelField="title"
						dataProvider="{dpMaps}" />
					<mx:Label text="Intitulé" />
					<mx:TextInput id="tiTitle" width="320" />
					<mx:HBox>
						<mx:Label text="Point d'entrée" />
						<mx:TextInput id="tiEntryPoint" width="60" />
						<mx:Spacer width="110" />
						<mx:Button label="ok" click="updateDest();currentState=null;" />
					</mx:HBox>
				</mx:Box>
			</mx:AddChild>			
		</mx:State>

		<mx:State name="editTrans">
			<mx:SetProperty target="{dgDests}" name="enabled" value="false" />
			<mx:RemoveChild target="{bDest}" />			
			<mx:RemoveChild target="{bTrans}" />
			<mx:AddChild>
				<mx:Box paddingTop="4" paddingBottom="4" paddingLeft="4" backgroundColor="#E8E8E8" width="100%">
					<mx:ComboBox id="cbTransList" width="320" rowCount="10" labelField="type"
						dataProvider="{dpTrans}" change="tiTranTitle.text=cbTransList.selectedItem.title" />
					<mx:Label text="Intitulé" />
					<mx:TextInput id="tiTranTitle" width="320" />
					<mx:Label text="Résumé de fin" />
					<mx:TextArea id="taTransInfo" width="100%" height="100" restrict="^|#" />
					<mx:HBox width="100%" horizontalAlign="right">
						<mx:Button label="ok" click="updateTrans(dgTrans.selectedItem);currentState=null;" />
					</mx:HBox>
				</mx:Box>
			</mx:AddChild>
		</mx:State>
	</mx:states>
	<!--
	Destinations -->

	<mx:Box id="bDest" width="100%">
		<mx:HBox>
			<mx:Label text="Destination(s)" />
			<mx:ButtonBar id="buttonBar"
				direction="horizontal" buttonHeight="20" buttonWidth="20"
				horizontalAlign="center" verticalAlign="middle"				
				horizontalGap="6" verticalGap="0" focusEnabled="false"
				dataProvider="{dpButtonBar}" itemClick="editDestEntrys(event)" />
		</mx:HBox>
		<mx:DataGrid id="dgDests" width="100%" dataProvider="{dpDests}" rowCount="3"
			doubleClickEnabled="true" itemClick="refreshDestTrans()" itemDoubleClick="editDest(dgDests.selectedItem)">
			<mx:columns>
				<mx:DataGridColumn headerText="intitulé / scène" dataField="title" />
				<mx:DataGridColumn headerText="entrée" dataField="entryPoint" width="80" />
			</mx:columns>
		</mx:DataGrid>
	</mx:Box>
	
	<mx:Box id="bTrans" width="100%" enabled="{dgDests.selectedItem != null}">
		<mx:HBox>
			<mx:Label text="Transport(s)" />
			<mx:ButtonBar
				direction="horizontal" buttonHeight="20" buttonWidth="20"
				horizontalAlign="center" verticalAlign="middle"				
				horizontalGap="6" verticalGap="0" focusEnabled="false"
				dataProvider="{dpButtonBar}" itemClick="editTransEntrys(event)" />
		</mx:HBox>
		<mx:DataGrid id="dgTrans" width="100%" dataProvider="{dpDestTrans}" rowCount="3"
			doubleClickEnabled="true" itemDoubleClick="editTrans(dgTrans.selectedItem)">
		<mx:columns>
			<mx:DataGridColumn headerText="Transport(s)" dataField="type" />
			<mx:DataGridColumn headerText="Intitulé" dataField="title" />
		</mx:columns>
		</mx:DataGrid>
	</mx:Box>
</mx:VBox>