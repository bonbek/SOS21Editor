<?xml version="1.0" encoding="UTF-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
	width="100%" height="100%"
	remove="onRemove()">

	<!-- Copyright 2009 toffer. -->
	
	<mx:Script>
	    <![CDATA[
		
		import flash.geom.Point;
		import mx.collections.ArrayCollection;
		import mx.controls.dataGridClasses.DataGridColumn;
		import mx.events.ItemClickEvent;
		import mx.managers.CursorManagerPriority;
   		import mx.managers.CursorManager;
		import mx.managers.PopUpManager;
		import mx.core.IFlexDisplayObject;
		
		/**
		 *	Formulaire additionnel pour triggers type action sur tile
		 *
		 *	@langversion ActionScript 3.0
		 *	@playerversion Flash 9.0
		 */
		
		[Embed("icons/textfield_add.png")]
		public var addIcon:Class;
		[Embed("icons/textfield_delete.png")]
		public var deleteIcon:Class;
		[Embed("icons/arrow_up.png")]
		public var arrowUpIcon:Class;
		[Embed("icons/arrow_down.png")]
		public var arrowDownIcon:Class;
		
		[Embed("icons/wand-left.png")]
	   	private var customCursor:Class;
		
		[Bindable]
		public var dpButtonBar:Array = [	{ icon:addIcon, toolTip:"ajouter une entrée", id:"add" },
											{ icon:deleteIcon, toolTip:"supprimer l'entrée selectionée", id:"remove" },
											{ icon:arrowUpIcon, toolTip:"déplacer", id:"up"},
											{ icon:arrowDownIcon, toolTip:"déplacer", id:"down"} ];
		
		// popups options
		private var popup:IFlexDisplayObject;
		private var optionPop0:TriggerForm106_A0;
		private var optionPop1:TriggerForm106_A0;
		private var optionPop3:TriggerForm106_A3;
		private var optionPop4:TriggerForm106_A4;
		private var optionPop5:TriggerForm106_A5;
		private var optionPop6:TriggerForm106_A6;
		// liste des preview
		private var fastPreviews:Array = [];
		
		//---------------------------------------
		// GETTER / SETTERS
		//---------------------------------------
		
		[Bindable]
		public var dpActions:ArrayCollection = new ArrayCollection();
		// liste types d'actions
		[Bindable]
		public var actionTypes:Array = [	{label:"cacher", data:0, state:"0"},
											{label:"afficher", data:1, state:"0"},
											{label:"téléporter", data:2, state:"2"},
											{label:"déplacer", data:3, state:"2"},
											{label:"parler / penser", state:"4"},
											{label:"animer", data:5, state:"5"},
											{label:"son", data:5, state:"6"} ];
		
		
		private function get sAction () : Object
		{ return dgActions.selectedItem; }
		
		private function get currentTarget () : Object
		{ return getTile(sAction.t); }
		
		// -------
		private var firstInit:Boolean = true;
		// trigger en pris en charge par cette instances
		private var _trigger:Object;
		[Bindable]
		public function set trigger(t:Object):void
		{
			if (firstInit) {
				_init();
				firstInit = false;
			}
			else {
				if (_trigger)
				{
					onRemove();
				}
				_trigger = t;
				// clean dataProvider
				dpActions.removeAll();
				// maj
				var args:Object = _trigger.arguments;
				if ("act" in args)
					dpActions.source = args["act"].slice();

				if ("lp" in args)
				{
					ckLoop.selected = args["lp"] != 1;
					nsLoop.value = args["lp"];
				}
				else {
					nsLoop.value = 1
					ckLoop.selected = false;
					updateOnSave();
				}	
			}
			
		}
		
		public function get trigger():Object {
			return _trigger;
		}
		
		//---------------------------------------
		// PUBLIC METHODS
		//---------------------------------------
		
		/**
		 *	Appelé au changement du trigger à éditer
		 *	@private
		 */
		public function safeSave() : void
		{
			updateOnSave();
		}
		
		/**
		 * Retourne la liste des Arguments "vitaux" pour ce type
		 * de trigger
		 * @private
		 */
		public function getSarfeArguments() : Array
		{
			return ["act", "lp"];
		}
		
		/**
		 *	Appelé à la suppression d'un trigger
		 *  
		 *	@param	trigger	 qui va être supprimé
		 *	@private
		 */
		public function onDeleteTrigger(trigger:Object = null):void
		{ }
		
		/**
		 *	Appelé par TriggersEditor avant la sauvegarde
		 *	Test et clean l'argument entryPoint
		 *	@private
		 */
		public function updateOnSave () : void
		{
			if (!_trigger) return;

			var nl:Array = [];
			var ob:Object;
			for each (var it:Object in dpActions)
			{
				ob = {t:it.t, a:it.a, d:it.d, we:it.we};
				if (it.p) ob.p = it.p;
				nl.push(ob);
			}

			_trigger.arguments["act"] = nl;
			_trigger.arguments["lp"] = nsLoop.value;
		}
		
		//---------------------------------------
		// PRIVATE & PROTECTED METHODS
		//---------------------------------------
		
		private function getTile (id:String) : Object
		{ return parentApplication.isosceneHelper.getTile(id); }
		
		/**
		 * Edition paramètres action
		 *	@param event Event
		 */
		private function onEditAction (event:Event) : void
		{
			// double click dans dg, selection de la cible
			if (event.type == MouseEvent.DOUBLE_CLICK)
			{
				disposeOptions();
				CursorManager.setCursor(customCursor, CursorManagerPriority.HIGH, 3, 2);
				parentApplication.viewport.addEventListener(MouseEvent.MOUSE_UP, onSelectTarget, false, 500, true);
			}
			
			var target:Object = event.target;
			switch (target)
			{
				// checkbox boucle
				case ckLoop :
					if (!ckLoop.selected)
						nsLoop.value = 1;
				case nsLoop :
					_trigger.arguments["lp"] = nsLoop.value;
					break;
				// combo type d'action
				case cbActionType :
					// switch spécifique
					disposeOptions();
					var oa:int = sAction.a;
					var na:int = target.selectedIndex;
					sAction.a = na;
					if (actionTypes[oa].state != actionTypes[na].state)
						sAction.p = {};
					dpActions.itemUpdated(sAction);
					onSelectAction();
					break;
				// durée
				case nsDuration :
					sAction.d = nsDuration.value;
					dpActions.itemUpdated(sAction);
					break;
				// attendre fin
				case ckWaitEnd :
					sAction.we = int(ckWaitEnd.selected);
					dpActions.itemUpdated(sAction);
					break;
			}
		}
		
		/**
		 * Réception selection du tile cible
		 *	@param event Event
		 */
		private function onSelectTarget (event:Event) : void
		{
			event.stopImmediatePropagation();
			event.preventDefault();
			CursorManager.removeAllCursors();

			if ("ID" in event.target)
			{
				parentApplication.viewport.removeEventListener(MouseEvent.MOUSE_UP, onSelectTarget, false);
				sAction.t = event.target.ID;
				dpActions.itemUpdated(sAction);
				onSelectAction();
			}
		}
		
		/**
		 * Selection action dans la liste
		 *	@private
		 */
		private function onSelectAction () : void
		{
			// Nettoyage
			if (sAction)
			{
				disposePreview();
				disposeOptions();
			}
			
			// maj composant
			cbActionType.selectedIndex = sAction.a;
			nsDuration.value = sAction.d;
			ckWaitEnd.selected = sAction.we;
			
			// Affichage Preview
			var ind:int = dgActions.selectedIndex;
			var act:Object;
			var tile:Object;
			for (var i:int = 0; i < ind; i++)
			{
				act = dpActions.getItemAt(i);
				tile = getTile(act.t);
				if (!tile) continue;
				switch (act.a)
				{
					case 0 :
						optionPop0.fastPreview(tile, act.p);
						break;
					case 1 :
						optionPop1.fastPreview(tile, act.p);
						break;
					case 2 :
					case 3 :
						optionPop3.fastPreview(tile, act.p);
						break;
					case 4 :
						break;
					case 5 :
						optionPop5.fastPreview(tile, act.p);
						break;
					case 6 :
						break;
				}
			}
			
			// Init sur actions
			openOptions(sAction.a);
		}
		
		/**
		 *  Ouvre les options pour l'action type action
		 *	@param action int
		 */
		private function openOptions (action:int) : void
		{
			switch (action)
			{
				// > Cacher
				case 0 :
					var tile:Object = currentTarget;
					if (tile)
					{
						popup = optionPop0;
					 	PopUpManager.addPopUp(popup, parent);
						optionPop0.setData(tile, sAction.p);
					}
					break;
				// > Afficher
				case 1 :
					tile = currentTarget;
					if (tile)
					{
						popup = optionPop1;
					 	PopUpManager.addPopUp(popup, parent);
						optionPop1.setData(tile, sAction.p);
					}
					break;					
				// Téléporter
				case 2 :
				// > Déplacer
				case 3 :
					tile = currentTarget;
					if (tile)
					{
						popup = optionPop3;
					 	PopUpManager.addPopUp(popup, parent);
						optionPop3.setData(tile, sAction.p);
					}
					break;
				// > Faire parler
				case 4 :
					var pnj:Object = sAction.t == "bob" ? parentApplication.playerHelper
														: parentApplication.getHelper(sAction.t);				
					if (pnj)
					{
						popup = optionPop4;
					 	PopUpManager.addPopUp(popup, parent);
						optionPop4.setData(pnj, sAction.p);
					}
					break;
				// > Animer
				case 5 :
					tile = currentTarget;
					if (tile)
					{
						popup = optionPop5;
					 	PopUpManager.addPopUp(popup, parent);
						optionPop5.setData(tile, sAction.p);
					}
					break;
				// > Jouer un son
				case 6 :
					popup = optionPop6
				 	PopUpManager.addPopUp(popup, parent);
					optionPop6.setData(sAction.p);
					break;
					
			}
		}
		
		/**
		 *	@private
		 * Remise à l'état initial des tous les objets
		 * ciblés par les actions
		 */
		public function disposePreview () : void
		{
			optionPop0.disposeAllPreviews();
			optionPop1.disposeAllPreviews();
			optionPop3.disposeAllPreviews();
			optionPop5.disposeAllPreviews();
		}
		
		/**
		 *	@private
		 * Remise à l'état initial de l'objet
		 * Ciblé par l'action selectionnée
		 */
		public function disposeOptions () : void
		{
			if (!popup) return;
			
			optionPop0.x = optionPop1.x = optionPop3.x = optionPop4.x = optionPop5.x = optionPop6.x = popup.x;
			optionPop0.y = optionPop1.y = optionPop3.y = optionPop4.y = optionPop5.y = optionPop6.y = popup.y;
			
			switch (popup)
			{
				case optionPop0 : 
					optionPop0.dispose();
					PopUpManager.removePopUp(popup);
					break;				
				case optionPop1 :
					optionPop1.dispose();
					PopUpManager.removePopUp(popup);
					break;
				case optionPop3 :
					optionPop3.dispose();
					PopUpManager.removePopUp(popup);
					break;				
				case optionPop4 :
					optionPop4.dispose();
					PopUpManager.removePopUp(popup);
					break;
				case optionPop5 :
					optionPop5.dispose();
					PopUpManager.removePopUp(popup);
					break;
				case optionPop6 :
					optionPop6.dispose();
					PopUpManager.removePopUp(popup);
					break;				
			}
		}
		
		/**
		 *	@private
		 *  Appelé à le suppression d'une action
		 */
		private function removeAction (action:Object) : void
		{
			if (!popup) return;
			
			switch (popup)
			{
				case optionPop0 : 
					break;				
				case optionPop1 :
					break;
				case optionPop3 :
					break;				
				case optionPop4 :
					break;
				case optionPop5 :
					break;
				case optionPop6 :
					optionPop6.removed(action.p);
					break;				
			}
		}
		
		//---------------------------------------
		// EVENT HANDLERS
		//---------------------------------------

		/**
		 * 	Edition des entrées dans liste des actions
		 *	@param event ItemClickEvent
		 */
		private function onEditEntrys (event:ItemClickEvent) : void
		{
			switch(event.item.id)
			{
				case "add" :
					var t:String;
					if (_trigger) t = _trigger.refId;
					else if (sAction)
						t = sAction.t

					var entry:Object = {t:t, a:1, d:0, we:1, p:{}};
					if (sAction) {
						var nind:int = dgActions.selectedIndex + 1;
						dpActions.addItemAt(entry, nind);
						dgActions.selectedIndex = nind;
					}
					else {
						dpActions.addItem(entry);
						dgActions.selectedIndex = dpActions.length - 1;
					}
					break;
				case "remove" :
					if (!dgActions.selectedItem) return;
					
					disposePreview();
					disposeOptions();
					removeAction(sAction);
					
					ind = dgActions.selectedIndex;
					dpActions.removeItemAt(ind);
					return;
					break;
				case "up" :
					if (!dgActions.selectedItem) return;
					entry = dgActions.selectedItem;
					var ind:int = dgActions.selectedIndex;
					if (ind - 1 > -1)
					{
						dpActions.removeItemAt(ind);
						dpActions.addItemAt(entry, --ind);
						dgActions.selectedItem = entry;
						dgActions.scrollToIndex(ind);
					}							
					break;
				case "down" :
					if (!dgActions.selectedItem) return;

					entry = dgActions.selectedItem;
					ind = dgActions.selectedIndex;
					if (ind + 1 < dpActions.length)
					{
						dpActions.removeItemAt(ind)
						dpActions.addItemAt(entry, ++ind);
						dgActions.selectedItem = entry;
						dgActions.scrollToIndex(ind);
					}
					break;
			}
			
			updateOnSave();
			onSelectAction();
		}
		
		/**
		 *	@private
		 * Suppresion du composant de lla liste
		 * d'affichage
		 */
		private function onRemove () : void
		{
			// Check si le composant à été init
			if (optionPop0)
			{
				disposePreview();
				disposeOptions();
				dgActions.selectedItem = null;
			}
		}
		
		/**
		 *	@private
		 * 	Première initialisation
		 */
		private function _init () : void
		{
			// Formullaires de options par action
			optionPop0 = new TriggerForm106_A0;
			optionPop0.visState = false;
			optionPop1 = new TriggerForm106_A0;			
			optionPop1.visState = true;
			optionPop3 = new TriggerForm106_A3;
			optionPop4 = new TriggerForm106_A4;
			optionPop5 = new TriggerForm106_A5;
			optionPop6 = new TriggerForm106_A6;
			optionPop0.proxy = optionPop1.proxy = optionPop3.proxy = optionPop4.proxy = optionPop5.proxy = optionPop6.proxy = this;
			optionPop0.x = optionPop1.x = optionPop3.x = optionPop4.x = optionPop5.x = optionPop6.x = 500;
			optionPop0.y = optionPop1.y = optionPop3.y = optionPop4.y = optionPop5.y = optionPop5.y = 200;
		}
		
		//---------------------------------------
		// PRIVATE & PROTECTED METHODS
		//---------------------------------------
		
		/**
		 * 	Méthode de formatage intitulé des actions
		 *	@param item Object
		 *	@param column DataGridColumn
		 *	@return String
		 */
		private function labelFunction (item:Object, column:DataGridColumn) : String
		{
			var l:String;
			switch (column.dataField)
			{
				case "t" :
					var t:Object = parentApplication.isosceneHelper.getTile(item.t);
					if (t)
						l = t.name;
					break;
				case "a" :
					l = actionTypes[item.a].label;
					break;
				case "we" :
					if (item.we == 1) l = "att. fin";
					else
						l = item.d + " sec.";
					break;
			}
			return l;
		}

	    ]]>
	</mx:Script>
	
	<mx:HBox>
		<mx:ButtonBar id="buttonBar"
			direction="horizontal" buttonHeight="20" buttonWidth="20"
			horizontalAlign="center" verticalAlign="middle"				
			horizontalGap="6" verticalGap="0" focusEnabled="false"
			dataProvider="{dpButtonBar}" itemClick="onEditEntrys(event)" />
		<mx:CheckBox id="ckLoop" label="répéter" change="onEditAction(event)" />
		<!-- 
		 	Répétitions -->
		<mx:NumericStepper id="nsLoop" maximum="1000" enabled="{ckLoop.selected}" change="onEditAction(event)" />
	</mx:HBox>
	<!-- 
	 	Liste des actions -->
	<mx:DataGrid id="dgActions" headerHeight="0" dataProvider="{dpActions}" width="99%" rowCount="8"
		change="onSelectAction()" doubleClickEnabled="true" doubleClick="onEditAction(event)"
		toolTip="double cliquez pour selectionner la cible de l'action">
        <mx:columns>
            <mx:DataGridColumn width="150" dataField="t" headerText="objet" labelFunction="labelFunction" />
			<mx:DataGridColumn width="120" dataField="a" headerText="action" labelFunction="labelFunction" />
			<mx:DataGridColumn dataField="we" headerText="durée" labelFunction="labelFunction" />
        </mx:columns>
    </mx:DataGrid>
	<!-- 
	 	Durée / attente fin -->
	<mx:HBox enabled="{dgActions.selectedItem != null}">
		<mx:ComboBox id="cbActionType" rowCount="20" dataProvider="{actionTypes}" close="onEditAction(event)" />
		<mx:Label text="durée" />
		<mx:NumericStepper id="nsDuration" stepSize=".1" enabled="{!ckWaitEnd.selected || cbActionType.selectedIndex==4}" change="onEditAction(event)" />
		<mx:CheckBox id="ckWaitEnd" label="att. fin" change="onEditAction(event)" />
	</mx:HBox>

</mx:VBox>